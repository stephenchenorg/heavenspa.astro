---
import { seoMeta } from '@stephenchenorg/astro/page'
import Layout from '@/layouts/Layout.astro'
import {gql, graphQLAPI} from '@/api'
import { createAstroT } from '@/utils/astro-i18n'

export interface Article {
  id?: number
  title: string
  cover: string
  content: string
  ended_at?: string
  started_at?: string
  date?: string
  year?: string
  month?: string
}

export interface ArticlesResponse {
  articles: {
    data: Article[]
    has_more_pages: boolean
    last_page: number
    per_page: number
    to: number
    total: number
    from: number
  }
}

export const prerender = true

export async function getStaticPaths() {
  let articles: Article[] = []

  try {
    console.log('Fetching articles data from API...')
    const articlesData: ArticlesResponse = await graphQLAPI(gql`
      query MyQuery {
        articles{
          data {
            id
            content
            cover
            ended_at
            title
          }
          has_more_pages
          last_page
          per_page
          to
          total
          from
        }
      }
    `)

    // 將 API 資料轉換為 Article 格式
    const apiArticles = (articlesData.articles.data || []).map((article: Article, index: number) => {
      const createdDate = new Date()
      return {
        id: article.id || (index + 1), // 優先使用 API 的 id，否則使用 index + 1
        title: article.title,
        cover: article.cover,
        content: article.content,
        ended_at: article.ended_at,
        started_at: createdDate.toISOString(),
        date: createdDate.getDate().toString().padStart(2, '0'),
        year: createdDate.getFullYear().toString(),
        month: (createdDate.getMonth() + 1).toString().padStart(2, '0'),
      }
    })

    articles = apiArticles
  } catch (error) {
    articles = []
  }

  const paths = articles.map((article) => {
    const pathId = article.id!.toString()
    console.log(`Creating path for article ID: ${pathId}`)
    return {
      params: { id: pathId },
      props: { article }
    }
  })

  console.log('All generated paths:', paths.map(p => p.params.id))
  return paths
}

const { article } = Astro.props as { article?: Article }
const { id: currentId } = Astro.params

// 如果找不到文章，創建一個預設的文章物件
const defaultArticle: Article = {
  id: 0,
  title: '文章未找到',
  content: '<p>很抱歉，您請求的文章不存在或已被移除。</p><p>請返回新聞列表頁面查看其他文章。</p>',
  cover: 'https://hamahairspa.com/wp-content/uploads/2024/06/%E5%A4%A7young-woman-lying-down-with-traditional-hot-stones-along-spi-e1719460788846.jpeg',
  started_at: new Date().toISOString(),
}

const currentArticle = article || defaultArticle

const t = createAstroT(Astro)

const meta = seoMeta({
  title: `${currentArticle.title} - Heaven Spa`,
  description: currentArticle.content ? currentArticle.content.replace(/<[^>]*>/g, '').substring(0, 160) : '了解 Heaven Spa 的最新消息',
})
---

<Layout meta={meta}>
  <main class="min-h-screen">
    <!-- Hero Banner -->
    <section class="relative h-96 md:h-[500px] lg:h-[600px] overflow-hidden">
      <!-- Background Image -->
      <div class="absolute inset-0">
        <img 
          src={currentArticle.cover || 'https://hamahairspa.com/wp-content/uploads/2024/06/%E5%A4%A7young-woman-lying-down-with-traditional-hot-stones-along-spi-e1719460788846.jpeg'} 
          alt={currentArticle.title}
          class="w-full h-full object-cover"
        />
      </div>

      <!-- Content -->
      <div class="relative z-10 h-full flex items-center justify-center">
        <div class="text-center text-white px-4 max-w-4xl">
          <!-- Title -->
          <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold leading-tight">
            {currentArticle.title}
          </h1>
        </div>
      </div>
    </section>

    <!-- Article Content -->
    <section class="section-container pt-16 pb-20" style="background-color: var(--theme-bg); color: var(--theme-text);">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Breadcrumb Navigation -->
        <nav class="mb-8">
          <ol class="flex items-center space-x-2 text-sm" style="color: var(--theme-text-secondary);">
            <li><a href="/" class="transition-colors hover:underline" style="color: var(--theme-text-secondary);">首頁</a></li>
            <li><span style="color: var(--theme-text-muted);">/</span></li>
            <li><a href="/news" class="transition-colors hover:underline" style="color: var(--theme-text-secondary);">最新消息</a></li>
            <li><span style="color: var(--theme-text-muted);">/</span></li>
            <li class="truncate max-w-xs" style="color: var(--theme-text);">{currentArticle.title || '新聞詳情'}</li>
          </ol>
        </nav>

        <!-- Article Body -->
        <div class="w-full prose prose-lg max-w-none leading-relaxed mt-4" id="article-wrapper">
          {currentArticle.content ? (
            <div id="article-content" set:html={currentArticle.content}></div>
          ) : (
            <p style="color: var(--theme-text-secondary);">內容載入中...</p>
          )}
        </div>

        <!-- Date Section -->
        <div class="mt-8 pt-6 border-t" style="border-color: var(--theme-border);">
          <div class="flex items-center justify-center space-x-4 text-sm md:text-base" style="color: var(--theme-text-secondary);">
            <div class="flex items-center space-x-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
              <span>發布日期: {new Date(currentArticle.started_at || new Date()).toLocaleDateString('zh-TW')}</span>
            </div>
            {currentArticle.ended_at && (
              <>
                <span style="color: var(--theme-text-muted);">•</span>
                <div class="flex items-center space-x-2">
                  <span>截止日期: {new Date(currentArticle.ended_at).toLocaleDateString('zh-TW')}</span>
                </div>
              </>
            )}
          </div>
        </div>

        <!-- Back to News Button -->
        <div class="mt-12 pt-8 border-t" style="border-color: var(--theme-border);">
          <div class="flex justify-center">
            <a href="/news"
               class="inline-flex items-center space-x-2 transition-colors duration-300 group px-6 py-3 text-white rounded-lg shadow-sm font-medium" style="background-color: var(--color-primary-500);">
              <svg class="w-5 h-5 transform group-hover:-translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
              <span>返回新聞列表</span>
            </a>
          </div>
        </div>
      </div>
    </section>
  </main>
</Layout>

<script>
  // 監聽主題變化事件
  document.addEventListener('themeChanged', (event) => {
    updateArticleContent(event.detail.theme);
  });

  // 頁面加載時也執行一次
  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
      const currentTheme = document.body.classList.contains('dark-theme') ? 'dark' : 'light';
      updateArticleContent(currentTheme);
    }, 100);
  });

  function updateArticleContent(theme) {
    const articleContent = document.getElementById('article-content');
    const articleWrapper = document.getElementById('article-wrapper');
    if (!articleContent) return;

    // 設定文章區塊背景色
    if (articleWrapper) {
      if (theme === 'dark') {
        articleWrapper.style.backgroundColor = 'var(--theme-bg)';
      } else {
        articleWrapper.style.backgroundColor = 'var(--theme-bg)';
      }
    }

    // 獲取文章內容中的所有元素
    const elements = articleContent.querySelectorAll('*');

    elements.forEach(element => {
      // 檢查原始 HTML 中是否有內聯顏色設定
      const originalStyle = element.getAttribute('style') || '';
      const hasOriginalColor = originalStyle.includes('color:');

      // 處理背景色
      if (originalStyle.includes('background')) {
        if (theme === 'dark') {
          // 黑夜模式：將白色背景替換為黑色
          if (originalStyle.includes('rgb(255, 255, 255)') || originalStyle.includes('#ffffff') || originalStyle.includes('white')) {
            const newStyle = originalStyle
              .replace(/background:[^;]*rgb\(255,\s*255,\s*255\)[^;]*/gi, 'background: rgb(0, 0, 0)')
              .replace(/background:[^;]*#ffffff[^;]*/gi, 'background: #000000');
            element.setAttribute('style', newStyle);
          }
        } else {
          // 白天模式：將黑色背景替換為白色
          if (originalStyle.includes('rgb(0, 0, 0)') || originalStyle.includes('#000000') || originalStyle.includes('black')) {
            const newStyle = originalStyle
              .replace(/background:[^;]*rgb\(0,\s*0,\s*0\)[^;]*/gi, 'background: rgb(255, 255, 255)')
              .replace(/background:[^;]*#000000[^;]*/gi, 'background: #ffffff');
            element.setAttribute('style', newStyle);
          }
        }
      }

      // 處理文字顏色 - 只處理原始 HTML 中沒有設定顏色的元素
      if (!hasOriginalColor) {
        if (theme === 'dark') {
          // 黑夜模式設為白色
          element.style.color = '#ffffff';
        } else {
          // 白天模式設為黑色
          element.style.color = '#000000';
        }
      }
      // 原始 HTML 中有設定顏色的元素完全不改變
    });
  }
</script>

