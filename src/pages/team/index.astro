---
import { seoMeta } from '@stephenchenorg/astro/page'
import Layout from '@/layouts/Layout.astro'
import SectionTitle from "../../components/ui/SectionTitle.astro";
import Badge from "../../components/ui/Badge.astro";
import { gql, graphQLAPI } from '@/api'
import type { TeamMember, TeamsResponse } from '@/types'

// GraphQL 查詢與錯誤處理
let teamMembers: TeamMember[] = []

try {
  const teamsData: TeamsResponse = await graphQLAPI(gql`
    query MyQuery {
      teams(sort_by: "asc", sort_column: "sort") {
        data {
          id
          images {
            created_at
            id
            image {
              desktop
              desktop_blur
              mobile
              mobile_blur
            }
            updated_at
            is_default
          }
          image {
            desktop
            desktop_blur
            mobile
            mobile_blur
          }
          tags {
            data {
              id
              title
              slug
            }
          }
          title
          category {
            title
          }
        }
      }
    }
  `)
  teamMembers = teamsData.teams.data || []
  console.log("teamMembers >> ",teamMembers)
} catch (error) {
}


const meta = seoMeta({
  title: '服務團隊 - Heaven Spa',
})
---

<Layout meta={meta}>
  <main class="section-container pt-32 min-h-screen">
    <!-- 標題區 -->
    <SectionTitle title="服務團隊" subtitle="OUR TEAM" />

    <!-- Tab Navigation -->
    <div class="max-w-4xl mx-auto mb-8">
      <div
          class="flex flex-wrap justify-center gap-2 p-2 rounded-xl min-w-[600px]"
          style="background-color: var(--color-neutral-100);"
      >
        <button
            class="tab-button px-6 py-3 rounded-lg font-medium transition-all duration-300 flex-1 min-w-0"
            data-tab="團隊一覽"
            style="color: var(--theme-text);"
        >
          團隊一覽
        </button>
        <button
            class="tab-button px-6 py-3 rounded-lg font-medium transition-all duration-300 flex-1 min-w-0"
            data-tab="今日可預約"
            style="color: var(--theme-text);"
        >
          今日可預約
        </button>
        <button
            class="tab-button px-6 py-3 rounded-lg font-medium transition-all duration-300 flex-1 min-w-0"
            data-tab="本週推薦"
            style="color: var(--theme-text);"
        >
          本週推薦
        </button>
        <button
            class="tab-button px-6 py-3 rounded-lg font-medium transition-all duration-300 flex-1 min-w-0"
            data-tab="新人"
            style="color: var(--theme-text);"
        >
          新人
        </button>
      </div>
    </div>
    <div class="min-w-6xl mx-auto">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        { teamMembers && teamMembers.map((member) => (
          <div class="p-4 group cursor-pointer w-full h-120">
            <div class="carousel-container w-full h-120 bg-blue-200 mt-4 relative overflow-hidden" data-member-id={member.id}>
              <!-- 主圖片 -->
              <div class="carousel-slide absolute inset-0 opacity-100 transition-opacity duration-500">
                <img
                    src={member.image?.desktop || member.cover?.desktop || '/images/default-team.jpg'}
                    alt={member.title}
                    class="w-full h-full object-cover"
                />
              </div>
              <!-- 額外輪播圖片 -->
              {member.images && member.images.filter(imageItem => !imageItem.is_default).map((imageItem, imgIndex) => (
                <div class="carousel-slide absolute inset-0 opacity-0 transition-opacity duration-500">
                  <img
                      src={imageItem.image.desktop || '/images/default-team.jpg'}
                      alt={`${member.title} - Image ${imgIndex + 2}`}
                      class="w-full h-full object-cover"
                  />
                </div>
              ))}
              <!-- 輪播指示器 -->
              {member.images && member.images.filter(imageItem => !imageItem.is_default).length > 0 && (
                <div class="carousel-dots absolute bottom-2 left-1/2 transform -translate-x-1/2 flex gap-2 z-10">
                  <div class="carousel-dot w-2 h-2 rounded-full bg-white/90 cursor-pointer transition-all duration-200 hover:scale-125 active"></div>
                  {member.images.filter(imageItem => !imageItem.is_default).map(() => (
                    <div class="carousel-dot w-2 h-2 rounded-full bg-white/50 cursor-pointer transition-all duration-200 hover:bg-white/80 hover:scale-125"></div>
                  ))}
                </div>
              )}
              <!--Badge-->
              { member.tags && member.tags.data && member.tags.data.length > 0 && (
                <div class="absolute top-4 left-4 flex flex-wrap gap-2 z-10">
                  { member.tags.data.map(tag => (
                    <Badge title={tag.title} variant="primary" size="small"/>
                  )) }
                </div>
              )}
              <!-- Hover 遮罩和名字 -->
              <div class="absolute inset-0 bg-black/0 group-hover:bg-black/70 transition-all duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100">
                <div class="text-center transform translate-y-4 group-hover:translate-y-0 transition-all duration-300">
                  <h3 class="text-white font-bold text-2xl mb-2 drop-shadow-lg">
                    {member.title}
                  </h3>
                  <p class="text-white/90 text-lg font-medium drop-shadow">
                    {member.category.title}
                  </p>
                </div>
              </div>
            </div>
          </div>
        )) }
      </div>
    </div>
  </main>
</Layout>

<script>
  // 團隊輪播功能
  document.addEventListener('DOMContentLoaded', () => {
    // 初始化所有輪播容器
    const carouselContainers = document.querySelectorAll('.carousel-container')

    carouselContainers.forEach(container => {
      const slides = container.querySelectorAll('.carousel-slide')
      const dots = container.querySelectorAll('.carousel-dot')
      
      // 如果只有一張圖片，不需要輪播
      if (slides.length <= 1) return

      let currentSlide = 0
      let autoSlideTimer = null

      // 顯示指定的幻燈片
      function showSlide(index) {
        // 隱藏所有幻燈片
        slides.forEach(slide => {
          slide.style.opacity = '0'
        })

        // 重置所有指示器
        dots.forEach(dot => {
          dot.classList.remove('active')
          dot.style.backgroundColor = 'rgba(255, 255, 255, 0.5)'
          dot.style.transform = 'scale(1)'
        })

        // 顯示當前幻燈片
        if (slides[index]) {
          slides[index].style.opacity = '1'
        }

        // 激活當前指示器
        if (dots[index]) {
          dots[index].classList.add('active')
          dots[index].style.backgroundColor = 'rgba(255, 255, 255, 0.9)'
          dots[index].style.transform = 'scale(1.2)'
        }
      }

      // 下一張幻燈片
      function nextSlide() {
        currentSlide = (currentSlide + 1) % slides.length
        showSlide(currentSlide)
      }

      // 上一張幻燈片
      function prevSlide() {
        currentSlide = currentSlide === 0 ? slides.length - 1 : currentSlide - 1
        showSlide(currentSlide)
      }

      // 自動輪播
      function startAutoSlide() {
        autoSlideTimer = setInterval(nextSlide, 3000) // 每3秒切換
      }

      function stopAutoSlide() {
        if (autoSlideTimer) {
          clearInterval(autoSlideTimer)
          autoSlideTimer = null
        }
      }

      // 指示器點擊事件
      dots.forEach((dot, index) => {
        dot.addEventListener('click', (e) => {
          e.stopPropagation()
          currentSlide = index
          showSlide(currentSlide)
          stopAutoSlide()
          startAutoSlide() // 重新開始自動輪播
        })
      })

      // 點擊圖片切換
      container.addEventListener('click', (e) => {
        if (e.target.classList.contains('carousel-dot')) return
        nextSlide()
        stopAutoSlide()
        startAutoSlide()
      })

      // 滑鼠懸停時暫停輪播
      container.addEventListener('mouseenter', stopAutoSlide)
      container.addEventListener('mouseleave', startAutoSlide)

      // 初始化顯示第一張幻燈片
      showSlide(0)
      
      // 開始自動輪播
      startAutoSlide()
    })
  })
  
  // 原有的其他功能
  document.addEventListener('DOMContentLoaded', () => {
    // 初始化所有輪播容器
    const carouselContainers = document.querySelectorAll('.carousel-container')

    carouselContainers.forEach(container => {
      const slides = container.querySelectorAll('.carousel-slide')
      const dots = container.querySelectorAll('.carousel-dot')
      
      // 如果只有一張圖片，不需要輪播
      if (slides.length <= 1) return

      let currentSlide = 0
      let autoSlideTimer = null

      // 顯示指定的幻燈片
      function showSlide(index) {
        // 隱藏所有幻燈片
        slides.forEach(slide => {
          slide.style.opacity = '0'
        })

        // 重置所有指示器
        dots.forEach(dot => {
          dot.classList.remove('active')
          dot.style.backgroundColor = 'rgba(255, 255, 255, 0.5)'
          dot.style.transform = 'scale(1)'
        })

        // 顯示當前幻燈片
        if (slides[index]) {
          slides[index].style.opacity = '1'
        }

        // 激活當前指示器
        if (dots[index]) {
          dots[index].classList.add('active')
          dots[index].style.backgroundColor = 'rgba(255, 255, 255, 0.9)'
          dots[index].style.transform = 'scale(1.2)'
        }
      }

      // 下一張幻燈片
      function nextSlide() {
        currentSlide = (currentSlide + 1) % slides.length
        showSlide(currentSlide)
      }

      // 上一張幻燈片
      function prevSlide() {
        currentSlide = currentSlide === 0 ? slides.length - 1 : currentSlide - 1
        showSlide(currentSlide)
      }

      // 自動輪播
      function startAutoSlide() {
        autoSlideTimer = setInterval(nextSlide, 4000) // 每4秒切換
      }

      function stopAutoSlide() {
        if (autoSlideTimer) {
          clearInterval(autoSlideTimer)
          autoSlideTimer = null
        }
      }

      // 指示器點擊事件
      dots.forEach((dot, index) => {
        dot.addEventListener('click', (e) => {
          e.stopPropagation()
          currentSlide = index
          showSlide(currentSlide)
          stopAutoSlide()
          startAutoSlide() // 重新開始自動輪播
        })
      })

      // 滑鼠懸停時暫停輪播
      container.addEventListener('mouseenter', stopAutoSlide)
      container.addEventListener('mouseleave', startAutoSlide)

      // 觸控支援
      let startX = 0
      let isDragging = false

      container.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX
        isDragging = true
        stopAutoSlide()
      })

      container.addEventListener('touchmove', (e) => {
        if (!isDragging) return
        e.preventDefault()
      })

      container.addEventListener('touchend', (e) => {
        if (!isDragging) return

        const endX = e.changedTouches[0].clientX
        const diffX = startX - endX

        if (Math.abs(diffX) > 50) { // 最小滑動距離
          if (diffX > 0) {
            // 向左滑動，下一張
            nextSlide()
          } else {
            // 向右滑動，上一張
            prevSlide()
          }
        }

        isDragging = false
        startAutoSlide()
      })

      // 點擊容器切換到下一張
      container.addEventListener('click', (e) => {
        // 如果點擊的是指示器，則不執行切換
        if (e.target.classList.contains('carousel-dot')) return
        
        nextSlide()
        stopAutoSlide()
        startAutoSlide()
      })

      // 初始化顯示第一張幻燈片
      showSlide(0)
      
      // 開始自動輪播
      startAutoSlide()
    })
  })
</script>

<style>
  /* 團隊成員卡片樣式 */
  .team-member-card {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .team-member-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
  }

  /* 輪播指示器樣式 */
  .carousel-dot {
    transition: all 0.3s ease;
  }

  .carousel-dot:hover {
    transform: scale(1.3) !important;
    background-color: rgba(255, 255, 255, 0.8) !important;
  }

  .carousel-dot.active {
    background-color: rgba(255, 255, 255, 0.9) !important;
    transform: scale(1.2);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }

  /* 遮罩動畫優化 */
  .team-overlay {
    backdrop-filter: blur(0px);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .team-member-card:hover .team-overlay {
    backdrop-filter: blur(2px);
  }

  /* 名字容器動畫 */
  .team-name-container {
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* 圖片縮放效果 */
  .carousel-slide img {
    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1), filter 0.3s ease;
  }

  /* 響應式調整 */
  @media (max-width: 768px) {
    .team-member-card:hover {
      transform: translateY(-4px);
    }
    
    .carousel-dots {
      bottom: 8px !important;
    }
  }

  /* 確保卡片在小螢幕上的佈局 */
  @media (max-width: 640px) {
    .team-member-card {
      margin-bottom: 1rem;
    }
  }
</style>
