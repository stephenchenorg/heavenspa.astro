---
import { seoMeta } from '@stephenchenorg/astro/page'
import CourseSection from '@/components/CourseSection.astro'
import HeroBanner from '@/components/HeroBanner.astro'
import IndexNews from '@/components/IndexNews.astro'
import TeamSection from '@/components/TeamSection.astro'
import Layout from '@/layouts/Layout.astro'

// 暫時使用 Mock 資料 (開發用)
// TODO: 恢復 GraphQL API 呼叫
const data = {
  courses: {
    data: [
      {
        id: 1,
        title: '深層放鬆按摩',
        subtitle: '專業按摩服務',
        description: '採用專業手法，幫助您放鬆身心',
        created_at: '2024-01-01',
        cover: {
          desktop: '/images/courses/massage-1.jpg',
          desktop_blur: '',
          mobile: '/images/courses/massage-1.jpg',
          mobile_blur: '',
        },
      },
      {
        id: 2,
        title: 'SPA 水療護理',
        subtitle: '頂級 SPA 體驗',
        description: '享受頂級的水療護理服務',
        created_at: '2024-01-01',
        cover: {
          desktop: '/images/courses/spa-1.jpg',
          desktop_blur: '',
          mobile: '/images/courses/spa-1.jpg',
          mobile_blur: '',
        },
      },
    ],
  },
  banners: {
    data: [
      {
        image: {
          desktop: '/images/hero/banner-1.jpg',
          desktop_blur: '',
          mobile: '/images/hero/banner-1.jpg',
          mobile_blur: '',
        },
      },
    ],
  },
}

/*
const data = await graphQLAPI(gql`
query Query {
  courses {
    data {
      id
      title
      subtitle
      description
      created_at
      cover {
        desktop
        desktop_blur
        mobile
        mobile_blur
      }
    }
  }
  banners {
    data {
      image {
        desktop
        desktop_blur
        mobile
        mobile_blur
      }
    }
  }
}
`)
*/

const meta = seoMeta({
  title: 'Heaven Spa - 極致放鬆體驗',
})
---

<Layout meta={meta}>
  <!-- Hero Banner -->
  <HeroBanner banners={data.banners.data} />

  <!--<IntroSection />-->

  <TeamSection />

  <CourseSection courses={data.courses} />

  <IndexNews />

  <script>
    // 等待 DOM 載入完成
    document.addEventListener('DOMContentLoaded', () => {
      // 堆疊卡片效果
      const stackCards = document.querySelectorAll('.stack-card') as NodeListOf<HTMLElement>

      const stackObserver = new IntersectionObserver(entries => {
        entries.forEach((entry, _index) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('active')
          } else {
            entry.target.classList.remove('active')
          }
        })
      }, {
        threshold: 0.3,
        rootMargin: '-50px 0px -50px 0px',
      })

      stackCards.forEach(card => stackObserver.observe(card))

      // 平滑滾動效果
      const scrollLinks = document.querySelectorAll('a[href^="#"]') as NodeListOf<HTMLAnchorElement>
      scrollLinks.forEach(anchor => {
        anchor.addEventListener('click', function (e: Event) {
          e.preventDefault()
          const href = (this as HTMLAnchorElement).getAttribute('href')
          const target = href ? document.querySelector(href) : null
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start',
            })
          }
        })
      })

      // 視差滾動效果
      window.addEventListener('scroll', () => {
        const scrolled = window.pageYOffset
        const heroImage = document.querySelector('.hero-image') as HTMLElement
        if (heroImage) {
          heroImage.style.transform = `translateY(${scrolled * 0.5}px)`
        }
      })
    })
  </script>
</Layout>
