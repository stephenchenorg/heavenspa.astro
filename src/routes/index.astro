---
import type { PageMeta } from '@stephenchenorg/astro/page'
import { seoMeta } from '@stephenchenorg/astro/page'
import { getLocale } from 'i18n:astro'
import { getBanners } from '@/api/banners'
import HeroBanner from '@/components/HeroBanner.astro'
import IndexNews from '@/components/IndexNews.astro'
import ServiceSection from '@/components/ServiceSection.astro'
import TeamSection from '@/components/TeamSection.astro'
import Layout from '@/layouts/Layout.astro'
import { getCanonicalUrl, getSeoConfig } from '@/utils/seoConfig'
import IntroSection from '../components/IntroSection.astro'

// 獲取 banners 資料
const banners = await getBanners()
const currentLocale = getLocale()
const locale = currentLocale === 'en' ? 'en' : 'zh_TW'

// 取得 SEO 設定
const seoConfig = getSeoConfig('home', locale)

const meta = {
  ...seoMeta(seoConfig),
  canonical: getCanonicalUrl('', locale),
} as PageMeta
---

<Layout meta={meta}>
  <!-- Hero Banner -->
  <HeroBanner banners={banners} />
  <IntroSection />

  <div class="animate-in">
    <TeamSection />
  </div>

  <div class="animate-in">
    <ServiceSection />
  </div>

  <div class="animate-in">
    <IndexNews />
  </div>

  <script>
    // 等待 DOM 載入完成
    document.addEventListener('DOMContentLoaded', () => {
      // 堆疊卡片效果
      const stackCards = document.querySelectorAll('.stack-card') as NodeListOf<HTMLElement>

      const stackObserver = new IntersectionObserver(entries => {
        entries.forEach((entry, _index) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('active')
          } else {
            entry.target.classList.remove('active')
          }
        })
      }, {
        threshold: 0.3,
        rootMargin: '-50px 0px -50px 0px',
      })

      stackCards.forEach(card => stackObserver.observe(card))

      // 平滑滾動效果
      const scrollLinks = document.querySelectorAll('a[href^="#"]') as NodeListOf<HTMLAnchorElement>
      scrollLinks.forEach(anchor => {
        anchor.addEventListener('click', function (e: Event) {
          e.preventDefault()
          const href = (this as HTMLAnchorElement).getAttribute('href')
          const target = href ? document.querySelector(href) : null
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start',
            })
          }
        })
      })

      // 視差滾動效果
      window.addEventListener('scroll', () => {
        const scrolled = window.pageYOffset
        const heroImage = document.querySelector('.hero-image') as HTMLElement
        if (heroImage) {
          heroImage.style.transform = `translateY(${scrolled * 0.5}px)`
        }
      })
    })
  </script>
</Layout>
