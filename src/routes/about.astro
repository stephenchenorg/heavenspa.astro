---
import { seoMeta } from '@stephenchenorg/astro/page'
import { getLocale } from 'i18n:astro'
import { getServiceCategories } from '@/api/serviceCategories'
import Layout from '@/layouts/Layout.astro'
import { createNestedT } from '@/utils/i18n'
import Button from '../components/ui/Button.astro'
import SectionTitle from '../components/ui/SectionTitle.astro'

const t = await createNestedT()
const currentLocale = getLocale()
const isEnglish = currentLocale === 'en'

const data = await getServiceCategories()
const services = data.serviceCategories.data

const meta = seoMeta({
    title: t('about.pageTitle'),
})
---

<Layout meta={meta}>
    <!-- Hero Banner -->
    <section class="relative aspect-[1920/900] sm:aspect-[1920/800] lg:aspect-[1920/700] overflow-hidden">
        <div class="absolute inset-0">
            <img
              src="https://hamahairspa.com/wp-content/uploads/2024/06/%E5%A4%A7young-woman-lying-down-with-traditional-hot-stones-along-spi-e1719460788846.jpeg"
              alt="品牌介紹 banner"
              class="object-cover w-full h-full"
            />
            <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-black/10"></div>
        </div>
        <!-- Hero Content Overlay -->
        <div class="absolute inset-0 flex items-center justify-center pt-20 pb-10">
            <div class="text-center text-white px-6 sm:px-8 lg:px-12 max-w-4xl mx-auto">
                <!-- Main Title - Center -->
                <h1 class={`font-bold leading-tight tracking-wide mb-8 sm:mb-12 animate-fade-in-up ${isEnglish ? 'text-2xl sm:text-4xl lg:text-5xl xl:text-6xl' : 'text-3xl sm:text-5xl lg:text-6xl xl:text-7xl'}`}>
                    {t('about.hero.title')}
                </h1>
            </div>
        </div>
    </section>

    <main class="section-container-detail">
        <SectionTitle title={t('about.sectionTitle')} subtitle={t('about.sectionSubtitle')} />

        <!-- 品牌介紹內容 -->
        <section class="max-w-6xl mx-auto mb-20 sm:mb-28 px-4 sm:px-6 brand-intro-section" data-animate-in="up">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 lg:gap-16 items-center">
                <!-- 左側圖片 -->
                <div class="order-2 lg:order-1" data-animate-in="left">
                    <div class="relative aspect-[4/3] rounded-2xl overflow-hidden shadow-2xl">
                        <img
                          src="/images/about2.jpg"
                          alt="品牌介紹圖片"
                          class="w-full h-full object-cover"
                        />
                    </div>
                </div>

                <!-- 右側文字 -->
                <div class="order-1 lg:order-2" data-animate-in="right">
                    <h3
                      class={`font-bold mb-6 sm:mb-8 ${isEnglish ? 'text-2xl sm:text-3xl lg:text-4xl' : 'text-3xl sm:text-4xl lg:text-5xl'}`}
                      style="color: var(--theme-text)"
                    >{t('about.heaven.title')}</h3>
                    <div
                      class="intro-text-container space-y-6"
                      style="color: var(--theme-text)"
                    >
                        <p
                          class={`leading-relaxed ${isEnglish ? 'text-base sm:text-lg' : 'text-lg sm:text-xl'}`}
                          data-animate-in="up"
                        >
                            {t('about.heaven.description')}
                        </p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Sticky Stacking Scroll 區域 -->
        <div class="sticky-scroll-wrapper relative" id="service-categories">
            <!-- 左側進度指示器 -->
            <div class="fixed left-8 top-1/2 -translate-y-1/2 z-50 hidden lg:block">
                <div class="relative flex items-start">
                    <!-- 進度線 -->
                    <div class="relative w-1 bg-neutral-300 dark:bg-white/20 rounded-full flex-shrink-0" style="height: 300px;">
                        <div class="absolute top-0 left-0 w-full bg-primary-500 rounded-full transition-all duration-500 ease-out" id="progress-indicator" style="height: 0%;"></div>
                    </div>
                    <!-- 進度點和標籤容器 -->
                    <div class="absolute top-0 left-0 flex flex-col" id="progress-dots-container" style="height: 300px;">
                    </div>
                </div>
            </div>
            <!-- Section 1: 環境圖片輪播 -->
            <section class="sticky top-0 min-h-screen flex items-center justify-center py-20">
                <div class="w-full flex flex-col items-center justify-center py-8 px-6">
                    <!-- 文字描述區 -->
                    <div class="max-w-5xl mx-auto text-center mb-12 z-10">
                        <h2 class={`font-bold mb-6 leading-tight ${isEnglish ? 'text-2xl sm:text-3xl lg:text-4xl' : 'text-3xl sm:text-4xl lg:text-5xl'}`}>
                            {t('about.environment.title')}
                        </h2>
                        <p class={` mb-6 leading-relaxed ${isEnglish ? 'text-base sm:text-lg' : 'text-lg sm:text-xl'}`}>
                            {t('about.environment.description1')}
                        </p>
                        <p class={`leading-relaxed ${isEnglish ? 'text-base sm:text-lg' : 'text-lg sm:text-xl'}`}>
                            {t('about.environment.description2')}
                        </p>
                    </div>

                    <!-- 環境圖片輪播 -->
                    <div class="w-full max-w-7xl mx-auto px-4 sm:px-6">
                        <div class="env-carousel-container relative">
                            <div class="env-carousel-wrapper overflow-hidden">
                                <div class="env-carousel-track" id="env-track">
                                    <div class="env-slide">
                                        <img src="/images/about/about1.jpg" alt="環境圖片 1" class="w-full h-full object-cover rounded-2xl" />
                                    </div>
                                    <div class="env-slide">
                                        <img src="/images/about/about2.jpg" alt="環境圖片 2" class="w-full h-full object-cover rounded-2xl" />
                                    </div>
                                    <div class="env-slide">
                                        <img src="/images/about/about3.jpg" alt="環境圖片 3" class="w-full h-full object-cover rounded-2xl" />
                                    </div>
                                    <div class="env-slide">
                                        <img src="/images/about/about4.jpg" alt="環境圖片 4" class="w-full h-full object-cover rounded-2xl" />
                                    </div>
                                    <div class="env-slide">
                                        <img src="/images/about/about5.jpg" alt="環境圖片 5" class="w-full h-full object-cover rounded-2xl" />
                                    </div>
                                    <div class="env-slide">
                                        <img src="/images/about/about6.jpg" alt="環境圖片 6" class="w-full h-full object-cover rounded-2xl" />
                                    </div>
                                    <div class="env-slide">
                                        <img src="/images/about/about7.jpg" alt="環境圖片 7" class="w-full h-full object-cover rounded-2xl" />
                                    </div>
                                    <div class="env-slide">
                                        <img src="/images/about/about8.jpg" alt="環境圖片 8" class="w-full h-full object-cover rounded-2xl" />
                                    </div>
                                    <div class="env-slide">
                                        <img src="/images/about/about9.jpg" alt="環境圖片 9" class="w-full h-full object-cover rounded-2xl" />
                                    </div>
                                    <div class="env-slide">
                                        <img src="/images/about/about10.jpg" alt="環境圖片 10" class="w-full h-full object-cover rounded-2xl" />
                                    </div>
                                    <div class="env-slide">
                                        <img src="/images/about/about11.jpg" alt="環境圖片 11" class="w-full h-full object-cover rounded-2xl" />
                                    </div>
                                    <div class="env-slide">
                                        <img src="/images/about/about12.jpg" alt="環境圖片 12" class="w-full h-full object-cover rounded-2xl" />
                                    </div>
                                    <!-- 複製前4張用於無縫循環 -->
                                    <div class="env-slide">
                                        <img src="/images/about/about1.jpg" alt="環境圖片 1" class="w-full h-full object-cover rounded-2xl" />
                                    </div>
                                    <div class="env-slide">
                                        <img src="/images/about/about2.jpg" alt="環境圖片 2" class="w-full h-full object-cover rounded-2xl" />
                                    </div>
                                    <div class="env-slide">
                                        <img src="/images/about/about3.jpg" alt="環境圖片 3" class="w-full h-full object-cover rounded-2xl" />
                                    </div>
                                    <div class="env-slide">
                                        <img src="/images/about/about4.jpg" alt="環境圖片 4" class="w-full h-full object-cover rounded-2xl" />
                                    </div>
                                </div>
                            </div>

                            <!-- 導航按鈕 -->
                            <button class="env-carousel-btn env-prev" id="env-carousel-prev" aria-label="上一頁">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                                </svg>
                            </button>
                            <button class="env-carousel-btn env-next" id="env-carousel-next" aria-label="下一頁">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                </svg>
                            </button>

                            <!-- 指示點 -->
                            <div class="env-carousel-dots" id="env-carousel-dots">
                                <!-- JavaScript 會動態生成指示點 -->
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            {services.map((service, index) => (
                <section class="sticky top-0 h-screen flex flex-col md:flex-row md:items-center md:justify-end relative overflow-hidden service-section" data-service-index={index}>
                    <!-- 背景圖層 -->
                    <div class="absolute inset-0 w-full h-full bg-cover bg-center transition-transform duration-700 ease-out service-bg" style={`background-image: url(${service.cover?.desktop}); background-size: cover; background-position: center;`}></div>

                    <!-- 漸層遮罩：手機版上下漸層，桌面版左右漸層 -->
                    <div class="absolute inset-0 w-full h-full bg-gradient-to-b md:bg-gradient-to-r from-transparent via-black/30 to-black/70 transition-opacity duration-700"></div>

                    <!-- 內容區：手機版在上方，桌面版在右側 -->
                    <div class="w-full md:w-1/2 lg:w-2/5 px-6 pt-24 md:pt-0 md:px-12 lg:px-16 text-white relative z-10 service-content">
                        <div class="space-y-4 md:space-y-6">
                            <h2 class={`font-bold opacity-0 translate-y-8 transition-all duration-700 delay-150 service-title ${isEnglish ? 'text-2xl sm:text-3xl md:text-4xl lg:text-5xl' : 'text-3xl sm:text-4xl md:text-5xl lg:text-6xl'}`}>
                                {service.title}
                            </h2>
                            {service.description && (
                                <p class={`leading-relaxed opacity-0 translate-y-8 transition-all duration-700 delay-300 service-description ${isEnglish ? 'text-sm sm:text-base md:text-lg' : 'text-base sm:text-lg md:text-xl'}`}>
                                    {service.description}
                                </p>
                            )}
                            <a href={`/services/${service.id}/items`} class="inline-block mt-4 px-6 py-3 bg-primary-500 hover:bg-primary-600 text-white dark:text-black rounded-full font-medium transition-all duration-300 hover:-translate-y-0.5 hover:shadow-lg text-sm md:text-base opacity-0 translate-y-8 delay-500 service-button">
                                {isEnglish ? 'View Services' : '查看服務'}
                            </a>
                        </div>
                    </div>
                </section>
            ))}
        </div>

        <!-- 聯絡我們區域 -->
        <section class="max-w-4xl mx-auto py-16 sm:py-20 text-center" data-animate-in="fadeIn">
            <div class="space-y-8">
                <p class={`leading-relaxed text-theme-text ${isEnglish ? 'text-xl sm:text-2xl lg:text-3xl' : 'text-2xl sm:text-3xl lg:text-4xl'}`}>
                    {t('about.contact.description')}
                </p>
                <Button
                  href="/joinUs/careers"
                  variant="outline"
                  size="large"
                  text={t('about.contact.buttonText')}
                />
            </div>
        </section>
    </main>
</Layout>

<style>
    /* 動畫初始狀態 - 確保版面一開始就正常顯示 */
    [data-animate-in] {
        opacity: 1;
        transform: none;
        transition: all 0.6s ease-out;
    }

    /* 動畫準備狀態 */
    [data-animate-in]:not(.in-view) {
        opacity: 0;
    }

    [data-animate-in="up"]:not(.in-view) {
        transform: translateY(30px);
    }

    [data-animate-in="left"]:not(.in-view) {
        transform: translateX(-30px);
    }

    [data-animate-in="right"]:not(.in-view) {
        transform: translateX(30px);
    }

    [data-animate-in="fadeIn"]:not(.in-view) {
        opacity: 0;
    }

    [data-animate-in="scaleIn"]:not(.in-view) {
        transform: scale(0.95);
    }

    /* 動畫執行狀態 */
    [data-animate-in].in-view {
        opacity: 1;
        transform: none;
    }

    /* 輪播導航按鈕垂直置中 - 針對 services-carousel */
    .services-carousel-container {
        position: relative;
    }

    .services-carousel-container .carousel-prev,
    .services-carousel-container .carousel-next {
        top: 50% !important;
        transform: translateY(-50%) !important;
    }

    /* 使用 JavaScript 動態計算中心位置 */
    .services-carousel-container .carousel-prev,
    .services-carousel-container .carousel-next {
        position: absolute !important;
        z-index: 20 !important;
    }

    /* intro 文字段落階段式動畫 */
    .intro-text-container p[data-animate-in]:nth-child(1) {
        animation-delay: 0.2s;
    }

    .intro-text-container p[data-animate-in]:nth-child(2) {
        animation-delay: 0.4s;
    }

    .intro-text-container p[data-animate-in]:nth-child(3) {
        animation-delay: 0.6s;
    }

    /* 為 intro 文字添加特殊過渡效果 */
    .intro-text-container p[data-animate-in] {
        transition-delay: 0s;
    }

    .intro-text-container p[data-animate-in]:nth-child(1).in-view {
        transition-delay: 0.2s;
    }

    .intro-text-container p[data-animate-in]:nth-child(2).in-view {
        transition-delay: 0.4s;
    }

    .intro-text-container p[data-animate-in]:nth-child(3).in-view {
        transition-delay: 0.6s;
    }

    /* English language optimizations for About page */
    .about-en-text {
        word-break: break-word;
        hyphens: auto;
        letter-spacing: 0.025em;
    }

    /* Hero title adjustments for English */
    .about-hero-en {
        line-height: 1.1;
        letter-spacing: -0.01em;
    }

    /* Service carousel text adjustments for English */
    .about-service-en h4 {
        line-height: 1.3;
        word-break: break-word;
    }

    .about-service-en p {
        line-height: 1.4;
        word-break: break-word;
    }

    /* Environment section adjustments for English */
    .about-environment-en {
        word-spacing: 0.1em;
        line-height: 1.4;
    }

    /* Contact section adjustments for English */
    .about-contact-en {
        line-height: 1.3;
        word-break: break-word;
    }

    /* Responsive adjustments for English content */
    @media (max-width: 768px) {
        .about-hero-en {
            font-size: 1.5rem;
            line-height: 1.2;
        }

        .about-service-en h4 {
            font-size: 1rem;
            line-height: 1.3;
        }

        .about-service-en p {
            font-size: 0.875rem;
            line-height: 1.4;
        }

        .about-environment-en {
            font-size: 1rem;
            line-height: 1.4;
        }

        .about-contact-en {
            font-size: 1.125rem;
            line-height: 1.3;
        }
    }

    /* Service card background image optimization */
    .service-card {
        min-height: 400px;
    }

    .service-background {
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
    }

    /* Specific width handling for 1583px and similar resolutions */
    @media (min-width: 1500px) and (max-width: 1650px) {
        .service-background {
            width: 138% !important;
            transform: translateX(-8%);
        }

        .service-background:hover {
            transform: translateX(-32%) !important;
        }
    }

    @media (min-width: 1400px) and (max-width: 1499px) {
        .service-background {
            width: 135% !important;
            transform: translateX(-5%);
        }

        .service-background:hover {
            transform: translateX(-30%) !important;
        }
    }

    @media (min-width: 1651px) and (max-width: 1700px) {
        .service-background {
            width: 136% !important;
            transform: translateX(-6%);
        }

        .service-background:hover {
            transform: translateX(-31%) !important;
        }
    }

    /* For very wide screens */
    @media (min-width: 1700px) {
        .service-background {
            width: 140% !important;
            transform: translateX(-10%);
        }

        .service-background:hover {
            transform: translateX(-35%) !important;
        }
    }

    /* Ensure no gaps on medium-large screens */
    @media (min-width: 1200px) and (max-width: 1399px) {
        .service-background {
            width: 135% !important;
            transform: translateX(-10%);
        }

        .service-background:hover {
            transform: translateX(-28%) !important;
        }
    }

    @media (min-width: 1024px) and (max-width: 1199px) {
        .service-background {
            width: 140% !important;
            transform: translateX(-15%);
        }

        .service-background:hover {
            transform: translateX(-35%) !important;
        }
    }

    /* For smaller desktop screens */
    @media (min-width: 768px) and (max-width: 1023px) {
        .service-background {
            width: 145% !important;
            transform: translateX(-20%);
        }

        .service-background:hover {
            transform: translateX(-40%) !important;
        }
    }

    /* Environment Carousel 樣式 */
    .env-carousel-container {
        padding: 20px 0 60px;
    }

    .env-carousel-track {
        display: flex;
        gap: 16px;
        transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .env-slide {
        flex: 0 0 calc(50% - 8px);
        aspect-ratio: 4/3;
    }

    @media (min-width: 768px) {
        .env-slide {
            flex: 0 0 calc(33.333% - 11px);
        }
    }

    @media (min-width: 1024px) {
        .env-slide {
            flex: 0 0 calc(25% - 12px);
        }
    }

    .env-slide img {
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
        transition: all 0.3s ease;
    }

    .env-slide:hover img {
        transform: translateY(-4px);
        box-shadow: 0 12px 32px rgba(0, 0, 0, 0.18);
    }

    /* 按鈕樣式 - 參考 Carousel.astro */
    .env-carousel-container {
        position: relative;
    }

    .env-carousel-btn {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 48px;
        height: 48px;
        border-radius: 50%;
        background: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(4px);
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        z-index: 50;
        color: white;
        pointer-events: auto;
        margin-top: -30px;
    }

    .env-carousel-btn:hover {
        background: rgba(0, 0, 0, 0.8);
        transform: translateY(-50%) scale(1.1);
    }

    .env-carousel-btn:active {
        transform: translateY(-50%) scale(0.95);
    }

    .env-prev {
        left: 16px;
    }

    .env-next {
        right: 16px;
    }

    /* 指示點 */
    .env-carousel-dots {
        display: flex;
        gap: 8px;
        justify-content: center;
        margin-top: 24px;
        position: relative;
        z-index: 10;
    }

    .env-dot {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: rgba(0, 0, 0, 0.3);
        cursor: pointer;
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }

    .env-dot.active {
        background: var(--theme-primary, #d4af37);
        width: 36px;
        border-radius: 6px;
    }

    .env-dot:hover {
        background: rgba(0, 0, 0, 0.5);
        transform: scale(1.2);
    }

    /* Sticky Stacking Scroll 樣式 */
    .sticky-scroll-wrapper {
        position: relative;
        width: 100%;
    }

    .sticky-scroll-wrapper section {
        width: 100%;
    }
</style>

<script>
    // 動畫觀察器初始化
    function initializeAnimations() {
        const animatedElements = document.querySelectorAll('[data-animate-in]')

        if (!animatedElements.length) return

        // 先將所有動畫元素設為可見狀態，避免初始載入時的版面問題
        animatedElements.forEach(element => {
            const el = element as HTMLElement
            el.style.opacity = '1'
            el.style.transform = 'none'
        })

        // 延遲一段時間後開始動畫觀察
        setTimeout(() => {
            // 重新設定初始狀態
            animatedElements.forEach(element => {
                if (!element.classList.contains('in-view')) {
                    const el = element as HTMLElement
                    const animationType = element.getAttribute('data-animate-in')

                    switch (animationType) {
                        case 'up':
                            el.style.opacity = '0'
                            el.style.transform = 'translateY(30px)'
                            break
                        case 'left':
                            el.style.opacity = '0'
                            el.style.transform = 'translateX(-30px)'
                            break
                        case 'right':
                            el.style.opacity = '0'
                            el.style.transform = 'translateX(30px)'
                            break
                        case 'fadeIn':
                            el.style.opacity = '0'
                            break
                        case 'scaleIn':
                            el.style.opacity = '0'
                            el.style.transform = 'scale(0.95)'
                            break
                        default:
                            el.style.opacity = '0'
                    }
                }
            })

            const observer = new IntersectionObserver(
                entries => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            // 檢查是否是 intro 文字段落
                            const isIntroText = entry.target.closest('.intro-text-container')

                            if (isIntroText) {
                                // 階段式觸發 intro 文字動畫
                                const container = entry.target.closest('.intro-text-container')
                                if (container) {
                                    const paragraphs = container.querySelectorAll('p[data-animate-in]')

                                    paragraphs.forEach((p, index) => {
                                        setTimeout(() => {
                                            p.classList.add('in-view')
                                            const pEl = p as HTMLElement
                                            pEl.style.opacity = '1'
                                            pEl.style.transform = 'none'
                                        }, index * 200) // 每個段落延遲 200ms
                                    })

                                    // 取消觀察所有 intro 段落
                                    paragraphs.forEach(p => observer.unobserve(p))
                                }
                            } else {
                                // 一般動畫元素
                                entry.target.classList.add('in-view')
                                const targetEl = entry.target as HTMLElement
                                targetEl.style.opacity = '1'
                                targetEl.style.transform = 'none'
                                observer.unobserve(entry.target)
                            }
                        }
                    })
                },
                {
                    threshold: 0.1,
                    rootMargin: '0px 0px -50px 0px',
                }
            )

            animatedElements.forEach(element => {
                observer.observe(element)
            })
        }, 100) // 延遲 100ms 開始動畫
    }

    // 頁面載入完成後初始化動畫
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(initializeAnimations, 50)
        })
    } else {
        setTimeout(initializeAnimations, 50)
    }

    // 備用初始化
    window.addEventListener('load', () => {
        setTimeout(initializeAnimations, 100)
    })

    // 輪播按鈕垂直置中功能
    function centerCarouselButtons() {
        const carousel = document.querySelector('.services-carousel-carousel')
        if (!carousel) {
            setTimeout(centerCarouselButtons, 500)
            return
        }

        const prevBtn = carousel.querySelector('.carousel-prev')
        const nextBtn = carousel.querySelector('.carousel-next')
        const slides = carousel.querySelectorAll('.carousel-slide')

        if (!prevBtn || !nextBtn || !slides.length) {
            setTimeout(centerCarouselButtons, 500)
            return
        }

        // 計算輪播內容的中心位置
        function updateButtonPositions() {
            if (!carousel) return
            const carouselRect = carousel.getBoundingClientRect()
            const firstSlide = slides[0]

            if (firstSlide) {
                const slideRect = firstSlide.getBoundingClientRect()
                const slideCenter = slideRect.top + slideRect.height / 2 - carouselRect.top

                // 設置按鈕位置
                if (prevBtn) {
                    const prevBtnElement = prevBtn as HTMLElement
                    prevBtnElement.style.top = `${slideCenter}px`
                    prevBtnElement.style.transform = 'translateY(-50%)'
                }
                if (nextBtn) {
                    const nextBtnElement = nextBtn as HTMLElement
                    nextBtnElement.style.top = `${slideCenter}px`
                    nextBtnElement.style.transform = 'translateY(-50%)'
                }
            }
        }

        // 初始設置
        updateButtonPositions()

        // 監聽窗口調整大小
        const resizeObserver = new ResizeObserver(updateButtonPositions)
        resizeObserver.observe(carousel)

        // 監聽窗口大小變化
        window.addEventListener('resize', updateButtonPositions)
    }

    // 初始化按鈕置中
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(centerCarouselButtons, 1000)
        })
    } else {
        setTimeout(centerCarouselButtons, 1000)
    }

    // 備用初始化
    window.addEventListener('load', () => {
        setTimeout(centerCarouselButtons, 1500)
    })

    // 服務區塊動畫效果
    function initServiceAnimations() {
        const serviceSections = document.querySelectorAll('.service-section')

        const observerOptions = {
            threshold: 0.3,
            rootMargin: '0px',
    }

        const observer = new IntersectionObserver(entries => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const section = entry.target as HTMLElement

                    // 背景放大效果
                    const bg = section.querySelector('.service-bg') as HTMLElement
                    if (bg) {
                        bg.style.transform = 'scale(1.05)'
                    }

                    // 標題動畫
                    const title = section.querySelector('.service-title') as HTMLElement
                    if (title) {
                        setTimeout(() => {
                            title.style.opacity = '1'
                            title.style.transform = 'translateY(0)'
                        }, 150)
                    }

                    // 描述動畫
                    const description = section.querySelector('.service-description') as HTMLElement
                    if (description) {
                        setTimeout(() => {
                            description.style.opacity = '1'
                            description.style.transform = 'translateY(0)'
                        }, 300)
                    }

                    // 按鈕動畫
                    const button = section.querySelector('.service-button') as HTMLElement
                    if (button) {
                        setTimeout(() => {
                            button.style.opacity = '1'
                            button.style.transform = 'translateY(0)'
                        }, 500)
                    }
                } else {
                    // 離開可視範圍時重置
                    const section = entry.target as HTMLElement

                    const bg = section.querySelector('.service-bg') as HTMLElement
                    if (bg) {
                        bg.style.transform = 'scale(1)'
                    }

                    const title = section.querySelector('.service-title') as HTMLElement
                    if (title) {
                        title.style.opacity = '0'
                        title.style.transform = 'translateY(32px)'
                    }

                    const description = section.querySelector('.service-description') as HTMLElement
                    if (description) {
                        description.style.opacity = '0'
                        description.style.transform = 'translateY(32px)'
                    }

                    const button = section.querySelector('.service-button') as HTMLElement
                    if (button) {
                        button.style.opacity = '0'
                        button.style.transform = 'translateY(32px)'
                    }
                }
            })
        }, observerOptions)

        serviceSections.forEach(section => {
            observer.observe(section)
        })
    }

    // 初始化服務動畫
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initServiceAnimations)
    } else {
        initServiceAnimations()
    }

    // 進度指示器功能
    function initProgressIndicator() {
        const progressIndicator = document.getElementById('progress-indicator')
        const progressDotsContainer = document.getElementById('progress-dots-container')
        const brandIntroSection = document.querySelector('.brand-intro-section')
        const serviceSections = document.querySelectorAll('.service-section')
        const stickyWrapper = document.querySelector('.sticky-scroll-wrapper')
        const environmentSection = document.querySelector('.sticky-scroll-wrapper > section:first-of-type')

        if (!progressIndicator || !progressDotsContainer || !stickyWrapper) return

        // 收集所有區塊標題（品牌介紹 + 環境 + 服務）
        const sections = [brandIntroSection, environmentSection, ...Array.from(serviceSections)]
        const sectionTitles = sections.map((section, index) => {
            if (index === 0) {
                // 品牌介紹區塊
                const title = section?.querySelector('h3')?.textContent?.trim() || '品牌介紹'
                return title
            } else if (index === 1) {
                // 環境區塊
                const title = section?.querySelector('h2')?.textContent?.trim() || '環境介紹'
                return title
            } else {
                // 服務區塊
                const title = section?.querySelector('.service-title')?.textContent?.trim() || `服務 ${index - 1}`
                return title
            }
        })

        // 生成進度點和標籤
        const totalSections = sections.length
        const itemHeight = 300 / (totalSections - 1) // 均勻分佈

        const dotsHTML = sectionTitles.map((title, index) => {
            const topPosition = index * itemHeight
            return `
                <div class="absolute flex items-center gap-3 cursor-pointer group progress-item"
                     data-index="${index}"
                     style="top: ${topPosition}px; left: -4px; transform: translateY(-50%);">
                    <!-- 進度點 -->
                    <div class="w-3 h-3 rounded-full border-2 border-neutral-400 dark:border-white/40 bg-transparent transition-all duration-300 progress-dot group-hover:scale-150 group-hover:border-primary-400" style="flex-shrink: 0;"></div>
                    <!-- 標籤文字 -->
                    <span class="text-sm font-medium text-neutral-600 dark:text-white/60 whitespace-nowrap transition-all duration-300 group-hover:text-primary-500 group-hover:translate-x-1 progress-label">
                        ${title}
                    </span>
                </div>
            `
        }).join('')

        progressDotsContainer.innerHTML = dotsHTML
        const dots = progressDotsContainer.querySelectorAll('.progress-dot')
        const labels = progressDotsContainer.querySelectorAll('.progress-label')
        const items = progressDotsContainer.querySelectorAll('.progress-item')

        function updateProgress() {
            if (!progressIndicator || !stickyWrapper) return

            let currentSectionIndex = 0

            // 檢查是否在品牌介紹區塊
            if (brandIntroSection) {
                const brandRect = brandIntroSection.getBoundingClientRect()
                if (brandRect.top <= window.innerHeight / 2 && brandRect.bottom >= window.innerHeight / 2) {
                    currentSectionIndex = 0
                    progressIndicator.style.height = `${(1 / totalSections) * 100}%`
                } else if (brandRect.bottom < window.innerHeight / 2) {
                    // 已經滾過品牌介紹，計算 sticky wrapper 進度
                    const wrapperRect = stickyWrapper.getBoundingClientRect()
                    const wrapperHeight = stickyWrapper.scrollHeight
                    const scrollProgress = Math.max(0, -wrapperRect.top)
                    const wrapperProgress = Math.min(1, scrollProgress / (wrapperHeight - window.innerHeight))

                    // 進度線：品牌介紹 + wrapper 進度
                    const totalProgressValue = (1 + wrapperProgress * (totalSections - 1)) / totalSections
                    progressIndicator.style.height = `${totalProgressValue * 100}%`

                    // 當前區塊：1 (環境) + wrapper 內的進度
                    currentSectionIndex = Math.min(
                        1 + Math.floor(wrapperProgress * (totalSections - 1)),
                        totalSections - 1
                    )
                } else {
                    // 還沒到品牌介紹
                    progressIndicator.style.height = '0%'
                    currentSectionIndex = -1
                }
            } else {
                // 沒有品牌介紹，使用原邏輯
                const wrapperRect = stickyWrapper.getBoundingClientRect()
                const wrapperHeight = stickyWrapper.scrollHeight
                const scrollProgress = Math.max(0, -wrapperRect.top)
                const totalProgress = Math.min(1, scrollProgress / (wrapperHeight - window.innerHeight))

                progressIndicator.style.height = `${totalProgress * 100}%`
                currentSectionIndex = Math.min(
                    Math.floor(totalProgress * totalSections),
                    totalSections - 1
                )
            }

            // 檢測是否為深色模式
            const isDarkMode = document.documentElement.classList.contains('dark')

            // 更新進度點和標籤狀態
            dots.forEach((dot, index) => {
                const dotElement = dot as HTMLElement
                const labelElement = labels[index] as HTMLElement

                if (index <= currentSectionIndex) {
                    dotElement.style.backgroundColor = '#d4af37' // primary-500
                    dotElement.style.borderColor = '#d4af37'
                    if (index === currentSectionIndex) {
                        dotElement.style.transform = 'scale(1.3)'
                        labelElement.style.color = '#d4af37'
                        labelElement.style.fontWeight = '600'
                    } else {
                        dotElement.style.transform = 'scale(1.1)'
                        labelElement.style.color = isDarkMode ? 'rgba(255, 255, 255, 0.8)' : 'rgba(64, 64, 64, 0.8)'
                        labelElement.style.fontWeight = '500'
                    }
                } else {
                    dotElement.style.backgroundColor = 'transparent'
                    dotElement.style.borderColor = isDarkMode ? 'rgba(255, 255, 255, 0.4)' : 'rgba(163, 163, 163, 0.6)'
                    dotElement.style.transform = 'scale(1)'
                    labelElement.style.color = isDarkMode ? 'rgba(255, 255, 255, 0.6)' : 'rgba(82, 82, 82, 0.8)'
                    labelElement.style.fontWeight = '500'
                }
            })
        }

        // 點擊跳轉功能
        items.forEach((item, index) => {
            item.addEventListener('click', () => {
                const targetSection = sections[index]
                if (targetSection) {
                    let targetScroll = 0

                    if (index === 0) {
                        // 品牌介紹區塊：滾動到 SectionTitle 上方
                        const sectionTitle = document.querySelector('.section-container-detail')
                        if (sectionTitle) {
                            targetScroll = sectionTitle.getBoundingClientRect().top + window.scrollY - 80
                        } else {
                            targetScroll = targetSection.getBoundingClientRect().top + window.scrollY - 100
                        }
                    } else if (index === 1) {
                        // 環境區塊：滾動到 sticky wrapper 開始位置
                        targetScroll = stickyWrapper.getBoundingClientRect().top + window.scrollY
                    } else {
                        // 其他服務區塊
                        const wrapperTop = stickyWrapper.getBoundingClientRect().top + window.scrollY
                        const sectionHeight = window.innerHeight
                        // index - 1 因為要扣掉品牌介紹
                        targetScroll = wrapperTop + ((index - 1) * sectionHeight)
                    }

                    // 平滑滾動到目標位置
                    window.scrollTo({
                        top: targetScroll,
                        behavior: 'smooth',
                })
                }
            })
        })

        // 監聽滾動
        window.addEventListener('scroll', updateProgress, { passive: true })
        updateProgress() // 初始化
    }

    // 初始化進度指示器
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initProgressIndicator)
    } else {
        initProgressIndicator()
    }

    // 環境圖片輪播 - 無縫循環
    function initEnvCarousel() {
        const track = document.getElementById('env-track') as HTMLElement
        const prevBtn = document.getElementById('env-carousel-prev') as HTMLButtonElement
        const nextBtn = document.getElementById('env-carousel-next') as HTMLButtonElement
        const dotsContainer = document.getElementById('env-carousel-dots') as HTMLElement

        if (!track || !prevBtn || !nextBtn || !dotsContainer) return

        const slides = track.querySelectorAll('.env-slide')
        const totalSlides = 12 // 實際圖片數量

        function getSlidesPerView() {
            if (window.innerWidth >= 1024) return 4
            if (window.innerWidth >= 768) return 3
            return 2
        }

        let currentIndex = 0
        let slidesPerView = getSlidesPerView()
        let isTransitioning = false

        // 生成指示點 (只顯示真實圖片的點)
        function createDots() {
            dotsContainer.innerHTML = ''
            const realPages = Math.ceil(totalSlides / slidesPerView)

            for (let i = 0; i < realPages; i++) {
                const dot = document.createElement('div')
                dot.classList.add('env-dot')
                if (i === 0) dot.classList.add('active')
                dot.addEventListener('click', () => goToSlide(i))
                dotsContainer.appendChild(dot)
            }
        }

        // 更新位置
        function updatePosition(smooth = true) {
            const firstSlide = slides[0] as HTMLElement
            const slideWidth = firstSlide.offsetWidth
            const gap = 16
            const offset = -(currentIndex * (slideWidth + gap))

            if (smooth) {
                track.style.transition = 'transform 0.5s cubic-bezier(0.4, 0, 0.2, 1)'
            } else {
                track.style.transition = 'none'
            }

            track.style.transform = `translateX(${offset}px)`

            // 更新指示點
            const dots = dotsContainer.querySelectorAll('.env-dot')
            const realPages = Math.ceil(totalSlides / slidesPerView)
            const activeIndex = currentIndex % realPages
            dots.forEach((dot, index) => {
                dot.classList.toggle('active', index === activeIndex)
            })
        }

        // 跳到指定頁
        function goToSlide(index: number) {
            if (isTransitioning) return
            currentIndex = index
            updatePosition()
        }

        // 下一頁
        function nextSlide() {
            if (isTransitioning) return
            isTransitioning = true
            currentIndex++
            updatePosition()

            // 檢查是否到達複製的圖片區域
            const maxRealIndex = totalSlides
            if (currentIndex >= maxRealIndex) {
                setTimeout(() => {
                    currentIndex = 0
                    updatePosition(false)
                    isTransitioning = false
                }, 500)
            } else {
                setTimeout(() => {
                    isTransitioning = false
                }, 500)
            }
        }

        // 上一頁
        function prevSlide() {
            if (isTransitioning) return
            isTransitioning = true

            if (currentIndex <= 0) {
                currentIndex = totalSlides
                updatePosition(false)
                setTimeout(() => {
                    currentIndex--
                    updatePosition()
                    setTimeout(() => {
                        isTransitioning = false
                    }, 500)
                }, 50)
            } else {
                currentIndex--
                updatePosition()
                setTimeout(() => {
                    isTransitioning = false
                }, 500)
            }
        }

        prevBtn.addEventListener('click', prevSlide)
        nextBtn.addEventListener('click', nextSlide)

        // 自動播放 (2.6秒)
        let autoplay = setInterval(nextSlide, 2600)

        track.addEventListener('mouseenter', () => clearInterval(autoplay))
        track.addEventListener('mouseleave', () => {
            autoplay = setInterval(nextSlide, 2600)
        })

        // 響應式
        let resizeTimer: ReturnType<typeof setTimeout>
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimer)
            resizeTimer = setTimeout(() => {
                const newSlidesPerView = getSlidesPerView()
                if (newSlidesPerView !== slidesPerView) {
                    slidesPerView = newSlidesPerView
                    createDots()
                    updatePosition(false)
                }
            }, 200)
        })

        createDots()
        updatePosition(false)
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initEnvCarousel)
    } else {
        initEnvCarousel()
    }
</script>
