---
// Theme Controller Component
---

<!-- Simple Theme Toggle Button -->
<div class="theme-controller-container">
  <button class="theme-toggle-btn" id="theme-toggle" aria-label="Toggle theme" title="切換主題">
    <!-- Light Mode Icon (Sun) -->
    <svg class="theme-icon light-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor"
         stroke-width="2">
      <circle cx="12" cy="12" r="5"/>
      <line x1="12" y1="1" x2="12" y2="3"/>
      <line x1="12" y1="21" x2="12" y2="23"/>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
      <line x1="1" y1="12" x2="3" y2="12"/>
      <line x1="21" y1="12" x2="23" y2="12"/>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
    </svg>

    <!-- Dark Mode Icon (Moon) -->
    <svg class="theme-icon dark-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor"
         stroke-width="2">
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
    </svg>
  </button>
</div>

<style>
  .theme-controller-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
  }

  .theme-toggle-btn {
    width: 60px;
    height: 60px;
    background: var(--color-primary-600);
    color: white;
    border: none;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    box-shadow: 0 4px 20px rgba(212, 175, 55, 0.3);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .theme-toggle-btn:hover {
    transform: scale(1.1);
    box-shadow: 0 6px 25px rgba(212, 175, 55, 0.4);
  }

  .theme-toggle-btn:active {
    transform: scale(0.95);
  }

  .theme-icon {
    position: absolute;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Light theme (default) - show sun icon */
  .light-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }

  .dark-icon {
    opacity: 0;
    transform: rotate(90deg) scale(0.8);
  }

  /* Dark theme - show moon icon */
  .dark-theme .light-icon {
    opacity: 0;
    transform: rotate(-90deg) scale(0.8);
  }

  .dark-theme .dark-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .theme-controller-container {
      top: 15px;
      right: 15px;
    }

    .theme-toggle-btn {
      width: 50px;
      height: 50px;
    }

    .theme-icon {
      width: 20px;
      height: 20px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const themeToggle = document.getElementById('theme-toggle')
    const body = document.body

    // Get saved theme or default to light
    let currentTheme = localStorage.getItem('theme') || 'light'

    // Apply saved theme
    applyTheme(currentTheme)

    // Simple toggle functionality
    themeToggle?.addEventListener('click', () => {
      // Toggle between themes
      currentTheme = currentTheme === 'light' ? 'dark' : 'light'

      // Apply new theme
      applyTheme(currentTheme)

      // Save to localStorage
      localStorage.setItem('theme', currentTheme)
    })

    function applyTheme(theme: string) {
      // Update body class
      body.classList.remove('dark-theme', 'light-theme')
      body.classList.add(`${theme}-theme`)

      // Update all sections with theme classes
      updateAllSections(theme)
    }

    function updateAllSections(theme: string) {
      // Update all major sections
      const sections = document.querySelectorAll('section, footer, header')
      sections.forEach(section => {
        if (theme === 'dark') {
          // Apply dark theme styles
          section.style.background = 'var(--theme-bg, #000000)'
          section.style.color = 'var(--theme-text, #ffffff)'
        } else {
          // Apply light theme styles
          section.style.background = 'var(--theme-bg, #ffffff)'
          section.style.color = 'var(--theme-text, #000000)'
        }
      })

      // Update text elements
      const textElements = document.querySelectorAll('h1, h2, h3, h4, h5, h6, p, span, div')
      textElements.forEach(element => {
        if (theme === 'dark') {
          if (element.style.color === 'rgb(0, 0, 0)' || element.classList.contains('text-black')) {
            element.style.color = 'var(--theme-text, #ffffff)'
          }
          if (element.style.color === 'rgb(102, 102, 102)' || element.classList.contains('text-neutral-600')) {
            element.style.color = 'var(--theme-text-secondary, #cccccc)'
          }
        } else {
          if (element.style.color === 'var(--theme-text, #ffffff)') {
            element.style.color = 'var(--theme-text, #000000)'
          }
          if (element.style.color === 'var(--theme-text-secondary, #cccccc)') {
            element.style.color = 'var(--theme-text-secondary, #666666)'
          }
        }
      })

      // Trigger custom event for components to update
      document.dispatchEvent(new CustomEvent('themeChanged', {
        detail: {theme}
      }))
    }

    // Handle keyboard shortcuts (Ctrl+Shift+T for quick toggle)
    document.addEventListener('keydown', (e) => {
      if (e.ctrlKey && e.shiftKey && e.key === 'T') {
        e.preventDefault()
        themeToggle?.click()
      }
    })
  })
</script>
