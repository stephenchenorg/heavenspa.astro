---
export interface Props {
  variant?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | 'info'
  size?: 'small' | 'medium' | 'large'
  rounded?: boolean
  outline?: boolean
  dismissible?: boolean
  title: string
}

const {
  variant = 'default',
  size = 'medium',
  rounded = true,
  outline = false,
  dismissible = false,
  title,
} = Astro.props

// Size variants
const sizeClasses = {
  small: 'px-2 py-1 text-xs',
  medium: 'px-3 py-1 text-sm',
  large: 'px-4 py-2 text-base',
}

// Variant classes using CSS custom properties
const variantClasses = {
  default: outline
    ? 'bg-transparent border text-primary-700 dark:text-primary-300'
    : 'text-primary-800 dark:text-primary-200',
  primary: outline
    ? 'bg-transparent border text-primary-600 dark:text-primary-400'
    : 'text-primary-800 dark:text-primary-200',
  secondary: outline
    ? 'bg-transparent border text-neutral-600 dark:text-neutral-400'
    : 'text-neutral-800 dark:text-neutral-200',
  success: outline
    ? 'bg-transparent border border-green-500 text-green-600 dark:text-green-400'
    : 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',
  warning: outline
    ? 'bg-transparent border border-yellow-500 text-yellow-600 dark:text-yellow-400'
    : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',
  danger: outline
    ? 'bg-transparent border border-red-500 text-red-600 dark:text-red-400'
    : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',
  info: outline
    ? 'bg-transparent border border-blue-500 text-blue-600 dark:text-blue-400'
    : 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',
}

// Custom styles using CSS variables
const customStyles = {
  default: outline
    ? {
        borderColor: 'var(--color-primary-500)',
        color: 'var(--color-primary-700)',
        '--tw-border-opacity': '1',
      }
    : {
        backgroundColor: 'var(--color-primary-100)',
        color: 'var(--color-primary-800)',
      },
  primary: outline
    ? {
        borderColor: 'var(--color-primary-500)',
        color: 'var(--color-primary-600)',
        '--tw-border-opacity': '1',
      }
    : {
        backgroundColor: 'var(--color-primary-100)',
        color: 'var(--color-primary-800)',
      },
  secondary: outline
    ? {
        borderColor: 'var(--color-neutral-500)',
        color: 'var(--color-neutral-600)',
        '--tw-border-opacity': '1',
      }
    : {
        backgroundColor: 'var(--color-neutral-200)',
        color: 'var(--color-neutral-800)',
      },
  success: outline
    ? { borderColor: '#10b981', color: '#059669', '--tw-border-opacity': '1' }
    : { backgroundColor: '#dcfce7', color: '#166534' },
  warning: outline
    ? { borderColor: '#f59e0b', color: '#d97706', '--tw-border-opacity': '1' }
    : { backgroundColor: '#fef3c7', color: '#92400e' },
  danger: outline
    ? { borderColor: '#ef4444', color: '#dc2626', '--tw-border-opacity': '1' }
    : { backgroundColor: '#fee2e2', color: '#991b1b' },
  info: outline
    ? { borderColor: '#3b82f6', color: '#2563eb', '--tw-border-opacity': '1' }
    : { backgroundColor: '#dbeafe', color: '#1e40af' },
}

// Dark mode styles
const darkStyles = {
  default: outline
    ? {
        borderColor: 'var(--color-primary-400)',
        color: 'var(--color-primary-300)',
      }
    : {
        backgroundColor: 'var(--color-primary-900)',
        color: 'var(--color-primary-200)',
      },
  primary: outline
    ? {
        borderColor: 'var(--color-primary-400)',
        color: 'var(--color-primary-400)',
      }
    : {
        backgroundColor: 'var(--color-primary-900)',
        color: 'var(--color-primary-200)',
      },
  secondary: outline
    ? {
        borderColor: 'var(--color-neutral-400)',
        color: 'var(--color-neutral-400)',
      }
    : {
        backgroundColor: 'var(--color-neutral-700)',
        color: 'var(--color-neutral-200)',
      },
  success: outline
    ? { borderColor: '#34d399', color: '#6ee7b7' }
    : { backgroundColor: '#064e3b', color: '#a7f3d0' },
  warning: outline
    ? { borderColor: '#fbbf24', color: '#fde047' }
    : { backgroundColor: '#78350f', color: '#fef3c7' },
  danger: outline
    ? { borderColor: '#f87171', color: '#fca5a5' }
    : { backgroundColor: '#7f1d1d', color: '#fecaca' },
  info: outline
    ? { borderColor: '#60a5fa', color: '#93c5fd' }
    : { backgroundColor: '#1e3a8a', color: '#dbeafe' },
}

const roundedClass = rounded ? 'rounded-full' : 'rounded'
const badgeClass = `inline-flex items-center gap-1 font-medium transition-all duration-200 ${sizeClasses[size]} ${variantClasses[variant]} ${roundedClass}`
---

<span class={badgeClass} style={customStyles[variant]} data-variant={variant} data-outline={outline}>
  <slot>{title}</slot>
  {dismissible && (
    <button
      type="button"
      class="ml-1 hover:bg-black/10 dark:hover:bg-white/10 rounded-full p-0.5 transition-colors duration-200"
      onclick="this.parentElement.remove()"
      aria-label="關閉"
    >
      <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
      </svg>
    </button>
  )}
</span>

<script define:vars={{ darkStyles }} is:inline>
  // Handle dark mode styles
  function updateBadgeStyles() {
  const badges = document.querySelectorAll('[data-variant]')
  const isDark = document.documentElement.classList.contains('dark')

  badges.forEach(badge => {
    const variant = badge.getAttribute('data-variant')
    // const isOutline = badge.getAttribute('data-outline') === 'true';

    if (isDark && darkStyles[variant]) {
      const styles = darkStyles[variant]
      Object.assign(badge.style, styles)
    }
  })
}

  // Update on theme change
  document.addEventListener('DOMContentLoaded', updateBadgeStyles)

// Listen for theme changes
const observer = new MutationObserver(updateBadgeStyles)
observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['class'],
})
</script>
