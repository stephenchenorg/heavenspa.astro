---
import Badge from './Badge.astro'
import type { TeamMember } from '@/types'

export interface Props {
  member: TeamMember
  showBadges?: boolean
  showHoverMask?: boolean
  showRating?: boolean
  cardClass?: string
  imageClass?: string
  onClick?: string
}

const {
  member,
  showBadges = false,
  showHoverMask = true,
  showRating = false,
  cardClass = 'p-4 group cursor-pointer w-full h-120',
  imageClass = 'carousel-container w-full h-64 relative overflow-hidden',
  onClick
} = Astro.props

const uniqueId = `carousel-${member.id}-${Math.random().toString(36).substr(2, 9)}`
---

<div class={cardClass} onclick={onClick}>
  <div class={imageClass} data-member-id={uniqueId}>
    <!-- 主圖片 -->
    <picture class="carousel-slide block w-full h-full absolute inset-0 opacity-100 transition-opacity duration-500 ease-in-out">
      <source media="(max-width: 768px)" srcset={member.image?.mobile || member.cover?.mobile} />
      <img
        src={member.image?.desktop || member.cover?.desktop || '/images/default-team.jpg'}
        alt={member.title}
        loading="lazy"
        onload="this.style.filter='none'"
        style="filter: blur(5px); transition: filter 0.3s ease;"
        class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
      />
    </picture>

    <!-- 額外輪播圖片 -->
    {member.images && member.images.filter(imageItem => !imageItem.is_default).map((imageItem, imgIndex) => (
      <picture class="carousel-slide block w-full h-full absolute inset-0 opacity-0 transition-opacity duration-500 ease-in-out">
        <source media="(max-width: 768px)" srcset={imageItem.image.mobile} />
        <img
          src={imageItem.image.desktop || '/images/default-team.jpg'}
          alt={`${member.title} - Image ${imgIndex + 2}`}
          loading="lazy"
          onload="this.style.filter='none'"
          style="filter: blur(5px); transition: filter 0.3s ease;"
          class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
        />
      </picture>
    ))}

    <!-- 輪播指示器 -->
    {member.images && member.images.filter(imageItem => !imageItem.is_default).length > 0 && (
      <div class="carousel-dots absolute bottom-2 left-1/2 transform -translate-x-1/2 flex gap-2 z-10">
        <div class="carousel-dot w-2 h-2 rounded-full bg-white/90 cursor-pointer transition-all duration-200 hover:scale-125 active"></div>
        {member.images.filter(imageItem => !imageItem.is_default).map(() => (
          <div class="carousel-dot w-2 h-2 rounded-full bg-white/50 cursor-pointer transition-all duration-200 hover:bg-white/80 hover:scale-125"></div>
        ))}
      </div>
    )}

    <!-- Badge 標籤 (可選) -->
    {showBadges && member.tags && member.tags.data && member.tags.data.length > 0 && (
      <div class="absolute top-4 left-4 flex flex-wrap gap-2 z-10">
        {member.tags.data.map(tag => (
          <Badge title={tag.title} variant="primary" size="small"/>
        ))}
      </div>
    )}

    <!-- 評級標籤 (可選，用於 TeamSection 風格) -->
    {showRating && (
      <div class="absolute bottom-3 left-3 bg-black/70 text-white px-2 py-1 rounded-md text-xs font-medium backdrop-blur-sm">
        ⭐ {member.category.title}
      </div>
    )}

    <!-- Hover 遮罩和名字 (可選) -->
    {showHoverMask && (
      <div class="absolute inset-0 bg-black/0 group-hover:bg-black/70 transition-all duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100">
        <div class="text-center transform translate-y-4 group-hover:translate-y-0 transition-all duration-300">
          <h3 class="text-white font-bold text-2xl mb-2 drop-shadow-lg">
            {member.title}
          </h3>
          <p class="text-white/90 text-lg font-medium drop-shadow">
            {member.category.title}
          </p>
        </div>
      </div>
    )}

    <!-- 標題資訊區 (當不使用 hover 遮罩時) -->
    {!showHoverMask && (
      <div class="space-y-1 mt-4">
        <div class="flex items-start justify-between">
          <h3 class="text-base font-semibold leading-tight line-clamp-1 flex-1 mr-2" style="color: var(--theme-text)">
            {member.title}
          </h3>
        </div>
      </div>
    )}
  </div>
</div>

<script>
  // 團隊輪播功能
  document.addEventListener('DOMContentLoaded', () => {
    // 初始化所有輪播容器
    const carouselContainers = document.querySelectorAll('.carousel-container')

    carouselContainers.forEach(container => {
      const slides = container.querySelectorAll('.carousel-slide')
      const dots = container.querySelectorAll('.carousel-dot')
      
      // 如果只有一張圖片，不需要輪播
      if (slides.length <= 1) return

      let currentSlide = 0
      let autoSlideTimer = null

      // 顯示指定的幻燈片
      function showSlide(index) {
        // 隱藏所有幻燈片
        slides.forEach(slide => {
          slide.style.opacity = '0'
        })

        // 重置所有指示器
        dots.forEach(dot => {
          dot.classList.remove('active')
          dot.style.backgroundColor = 'rgba(255, 255, 255, 0.5)'
          dot.style.transform = 'scale(1)'
        })

        // 顯示當前幻燈片
        if (slides[index]) {
          slides[index].style.opacity = '1'
        }

        // 激活當前指示器
        if (dots[index]) {
          dots[index].classList.add('active')
          dots[index].style.backgroundColor = 'rgba(255, 255, 255, 0.9)'
          dots[index].style.transform = 'scale(1.2)'
        }
      }

      // 下一張幻燈片
      function nextSlide() {
        currentSlide = (currentSlide + 1) % slides.length
        showSlide(currentSlide)
      }

      // 上一張幻燈片
      function prevSlide() {
        currentSlide = currentSlide === 0 ? slides.length - 1 : currentSlide - 1
        showSlide(currentSlide)
      }

      // 自動輪播
      function startAutoSlide() {
        autoSlideTimer = setInterval(nextSlide, 3000) // 每3秒切換
      }

      function stopAutoSlide() {
        if (autoSlideTimer) {
          clearInterval(autoSlideTimer)
          autoSlideTimer = null
        }
      }

      // 指示器點擊事件
      dots.forEach((dot, index) => {
        dot.addEventListener('click', (e) => {
          e.stopPropagation()
          currentSlide = index
          showSlide(currentSlide)
          stopAutoSlide()
          startAutoSlide() // 重新開始自動輪播
        })
      })

      // 滑鼠懸停時暫停輪播
      container.addEventListener('mouseenter', stopAutoSlide)
      container.addEventListener('mouseleave', startAutoSlide)

      // 觸控支援
      let startX = 0
      let isDragging = false

      container.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX
        isDragging = true
        stopAutoSlide()
      })

      container.addEventListener('touchmove', (e) => {
        if (!isDragging) return
        e.preventDefault()
      })

      container.addEventListener('touchend', (e) => {
        if (!isDragging) return

        const endX = e.changedTouches[0].clientX
        const diffX = startX - endX

        if (Math.abs(diffX) > 50) { // 最小滑動距離
          if (diffX > 0) {
            // 向左滑動，下一張
            nextSlide()
          } else {
            // 向右滑動，上一張
            prevSlide()
          }
        }

        isDragging = false
        startAutoSlide()
      })

      // 點擊容器切換到下一張
      container.addEventListener('click', (e) => {
        // 如果點擊的是指示器，則不執行切換
        if (e.target.classList.contains('carousel-dot')) return
        
        nextSlide()
        stopAutoSlide()
        startAutoSlide()
      })

      // 初始化顯示第一張幻燈片
      showSlide(0)
      
      // 開始自動輪播
      startAutoSlide()
    })
  })
</script>

<style>
  .backface-visibility-hidden {
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
  }

  .carousel-dot.active {
    background-color: rgba(255, 255, 255, 0.9) !important;
    transform: scale(1.2);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }

  .carousel-dot:hover {
    transform: scale(1.3) !important;
    background-color: rgba(255, 255, 255, 0.8) !important;
  }

  /* 圖片縮放效果 */
  .carousel-slide img {
    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1), filter 0.3s ease;
  }

  /* 響應式調整 */
  @media (max-width: 768px) {
    .group:hover {
      transform: translateY(-4px);
    }
    
    .carousel-dots {
      bottom: 8px !important;
    }
  }

  /* 確保卡片在小螢幕上的佈局 */
  @media (max-width: 640px) {
    .group {
      margin-bottom: 1rem;
    }
  }
</style>