---
import CourseCard from './CourseCard.astro';

interface Course {
  id: string;
  title: string;
  subtitle: string;
  description: string;
  image: string;
  features: string[];
  duration: string;
  level: string;
  gradient: string;
}

interface Props {
  courses: Course[];
}

const { courses } = Astro.props;
---

<section class="courses-carousel">
  <div class="carousel-container">
    <div class="carousel-track" id="carouselTrack">
      {courses.map((course, index) => (
        <CourseCard course={course} index={index} />
      ))}
    </div>
    
    <!-- 輪播控制 -->
    <div class="carousel-controls">
      <button class="carousel-btn prev-btn" id="prevBtn">
        <span>‹</span>
      </button>
      <div class="carousel-dots">
        {courses.map((_, index) => (
          <button class={`dot ${index === 0 ? 'active' : ''}`} data-slide={index}></button>
        ))}
      </div>
      <button class="carousel-btn next-btn" id="nextBtn">
        <span>›</span>
      </button>
    </div>

    <!-- 自動播放控制 -->
    <div class="autoplay-control">
      <button class="autoplay-btn" id="autoplayBtn">
        <span class="play-icon">⏸</span>
      </button>
    </div>
  </div>
</section>

<style>
  .courses-carousel {
    background: #f8f9fa;
    padding: 4rem 0;
    overflow: hidden;
  }

  .carousel-container {
    position: relative;
    max-width: 100%;
  }

  .carousel-track {
    display: flex;
    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .carousel-controls {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 2rem;
    margin-top: 3rem;
  }

  .carousel-btn {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    border: none;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .carousel-btn:hover {
    transform: scale(1.1);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  }

  .carousel-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .carousel-dots {
    display: flex;
    gap: 1rem;
  }

  .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: none;
    background: #ddd;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .dot.active {
    background: #667eea;
    transform: scale(1.3);
  }

  .autoplay-control {
    position: absolute;
    top: 2rem;
    right: 2rem;
  }

  .autoplay-btn {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    border: none;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  }

  .autoplay-btn:hover {
    background: white;
    transform: scale(1.1);
  }

  .play-icon {
    font-size: 1.2rem;
  }

  /* 響應式設計 */
  @media (max-width: 768px) {
    .carousel-controls {
      gap: 1rem;
      margin-top: 2rem;
    }

    .carousel-btn {
      width: 50px;
      height: 50px;
      font-size: 1.2rem;
    }

    .autoplay-control {
      top: 1rem;
      right: 1rem;
    }

    .autoplay-btn {
      width: 40px;
      height: 40px;
    }

    .play-icon {
      font-size: 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const track = document.getElementById('carouselTrack') as HTMLElement;
    const prevBtn = document.getElementById('prevBtn') as HTMLButtonElement;
    const nextBtn = document.getElementById('nextBtn') as HTMLButtonElement;
    const autoplayBtn = document.getElementById('autoplayBtn') as HTMLButtonElement;
    const dots = document.querySelectorAll('.dot') as NodeListOf<HTMLButtonElement>;

    let currentSlide = 0;
    const totalSlides = dots.length;
    let isAutoplay = true;
    let autoplayInterval: NodeJS.Timeout;

    // 初始化
    updateCarousel();
    startAutoplay();

    // 更新輪播
    function updateCarousel() {
      const translateX = -currentSlide * 100;
      track.style.transform = `translateX(${translateX}%)`;

      // 更新點擊指示器
      dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === currentSlide);
      });

      // 更新按鈕狀態
      prevBtn.disabled = currentSlide === 0;
      nextBtn.disabled = currentSlide === totalSlides - 1;
    }

    // 下一張
    function nextSlide() {
      if (currentSlide < totalSlides - 1) {
        currentSlide++;
        updateCarousel();
      } else if (isAutoplay) {
        currentSlide = 0;
        updateCarousel();
      }
    }

    // 上一張
    function prevSlide() {
      if (currentSlide > 0) {
        currentSlide--;
        updateCarousel();
      }
    }

    // 跳到指定幻燈片
    function goToSlide(index: number) {
      currentSlide = index;
      updateCarousel();
    }

    // 開始自動播放
    function startAutoplay() {
      if (isAutoplay) {
        autoplayInterval = setInterval(nextSlide, 5000);
      }
    }

    // 停止自動播放
    function stopAutoplay() {
      clearInterval(autoplayInterval);
    }

    // 切換自動播放
    function toggleAutoplay() {
      isAutoplay = !isAutoplay;
      const playIcon = autoplayBtn.querySelector('.play-icon') as HTMLElement;
      
      if (isAutoplay) {
        playIcon.textContent = '⏸';
        startAutoplay();
      } else {
        playIcon.textContent = '▶';
        stopAutoplay();
      }
    }

    // 事件監聽器
    nextBtn.addEventListener('click', () => {
      stopAutoplay();
      nextSlide();
      if (isAutoplay) startAutoplay();
    });

    prevBtn.addEventListener('click', () => {
      stopAutoplay();
      prevSlide();
      if (isAutoplay) startAutoplay();
    });

    autoplayBtn.addEventListener('click', toggleAutoplay);

    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        stopAutoplay();
        goToSlide(index);
        if (isAutoplay) startAutoplay();
      });
    });

    // 鍵盤控制
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        stopAutoplay();
        prevSlide();
        if (isAutoplay) startAutoplay();
      } else if (e.key === 'ArrowRight') {
        stopAutoplay();
        nextSlide();
        if (isAutoplay) startAutoplay();
      }
    });

    // 滑鼠懸停時暫停自動播放
    track.addEventListener('mouseenter', stopAutoplay);
    track.addEventListener('mouseleave', () => {
      if (isAutoplay) startAutoplay();
    });
  });
</script>
