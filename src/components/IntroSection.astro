---
import Button from '@/components/ui/Button.astro'
import { createNestedT } from '@/utils/i18n'
const t = await createNestedT()
---

<section
  class=" relative w-full md:min-h-[80vh] py-20 px-4 md:px-6 lg:px-8 md:py-8 lg:py-16 flex items-center justify-center overflow-hidden"
  id="intro"
  data-section="intro"
>
  <!-- Background Image -->
  <div class="absolute inset-0 flex items-center justify-end pointer-events-none bg-[linear-gradient(135deg,#C99700,#FFD54F)]">
    <img src="/images/group4.png" class="w-[130%] h-[130%] object-cover" />
  </div>

  <!-- Content Container -->
  <div class="relative z-10 flex items-center h-full">
    <div class="w-full h-full relative">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8 lg:gap-16 items-center h-full">

        <!-- Left Content - Background Text Area -->
        <div class="order-2 md:order-1 items-center justify-end h-full hidden md:flex" data-animate-in="left">
          <div class="text-[clamp(2rem,12vw,8rem)] leading-[0.8] font-black font-sans text-white dark:text-black select-none intro-bg-text">
            <div class="block ml-0 origin-left" data-animate-in="left" style="animation-delay: 0.2s;">{t('intro.backgroundText')}</div>
            <div class="block ml-4 md:ml-6 lg:ml-8 origin-left" data-animate-in="left" style="animation-delay: 0.4s;">{t('intro.backgroundText')}</div>
            <div class="block ml-8 md:ml-12 lg:ml-16 origin-left" data-animate-in="left" style="animation-delay: 0.6s;">{t('intro.backgroundText')}</div>
          </div>
        </div>

        <!-- Right Content - Main Content -->
        <div class="order-1 md:order-2 space-y-6 py-2 lg:space-y-8 max-w-xl relative flex flex-col justify-center overflow-hidden intro-main-content" data-animate-in="right">

          <!-- Main Heading -->
          <div class="space-y-4 relative z-10" data-animate-in="up">
            <h2 class="text-3xl lg:text-4xl xl:text-5xl font-bold leading-tight text-black">
              {t('intro.heading')}
            </h2>
          </div>

          <!-- Description -->
          <div class="space-y-4 text-black/90 relative z-10 intro-description-container">
            <p class="text-base lg:text-lg leading-relaxed" data-animate-in="up">
              {t('intro.description')}
            </p>
          </div>

          <!-- CTA Buttons -->
          <div class="flex flex-row gap-4 py-4 relative z-10 intro-buttons-container">
            <div data-animate-in="up" style="animation-delay: 0.2s;">
              <Button
                href='/about'
                variant="ghost"
                size="medium"
                text={t('intro.buttons.learnMore')}
                wrapperClass="flex-initial"
              />
            </div>
            <div data-animate-in="up" style="animation-delay: 0.4s;">
              <Button
                href='/services'
                variant="ghost"
                size="medium"
                text={t('intro.buttons.viewServices')}
                wrapperClass="flex-initial"
              />
            </div>
          </div>

        </div>

      </div>
    </div>
  </div>
</section>

<style>
  /* IntroSection 專屬動畫延遲 */
  .intro-bg-text div[data-animate-in]:nth-child(1) {
    animation-delay: 0.2s;
  }

  .intro-bg-text div[data-animate-in]:nth-child(2) {
    animation-delay: 0.4s;
  }

  .intro-bg-text div[data-animate-in]:nth-child(3) {
    animation-delay: 0.6s;
  }

  .intro-description-container [data-animate-in] {
    animation-delay: 0.3s;
  }

  .intro-buttons-container [data-animate-in]:nth-child(1) {
    animation-delay: 0.2s;
  }

  .intro-buttons-container [data-animate-in]:nth-child(2) {
    animation-delay: 0.4s;
  }
</style>

<script>
  // IntroSection 動畫初始化
  function initializeIntroAnimations() {
    const animatedElements = document.querySelectorAll('#intro [data-animate-in]')

    if (!animatedElements.length) return

    const observer = new IntersectionObserver(
      entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            // 檢查是否是背景文字容器
            const isBgText = entry.target.closest('.intro-bg-text')

            if (isBgText) {
              // 階段式觸發背景文字動畫
              const container = entry.target.closest('.intro-bg-text')
              if (container) {
                const textElements = container.querySelectorAll('div[data-animate-in]')

                textElements.forEach((element, index) => {
                  setTimeout(() => {
                    element.classList.add('in-view')
                  }, index * 200)
                })

                // 取消觀察所有背景文字元素
                textElements.forEach(el => observer.unobserve(el))
              }
            } else {
              // 一般動畫元素
              entry.target.classList.add('in-view')
              observer.unobserve(entry.target)
            }
          }
        })
      },
      {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px',
    }
    )

    animatedElements.forEach(element => {
      observer.observe(element)
    })
  }

  // 初始化動畫
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeIntroAnimations)
  } else {
    initializeIntroAnimations()
  }

  // 備用初始化
  window.addEventListener('load', () => {
    setTimeout(initializeIntroAnimations, 100)
  })
</script>
