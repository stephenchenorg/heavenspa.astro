---
import type { ServiceCategory } from '@/api/serviceCategories'
import { getLocale } from 'i18n:astro'
import SectionTitle from '@/components/ui/SectionTitle.astro'
import { createNestedT, getLinkByLocale } from '@/utils/i18n'

interface Props {
  services: ServiceCategory[]
}

const { services } = Astro.props
const t = await createNestedT()
const currentLocale = getLocale()
const isEnglish = currentLocale === 'en'

---

<section
  class="section-container-index"
  id="services"
  data-section="services"
>

  <!-- Section Title -->
  <div class="service-section-title" data-animate="true">
    <SectionTitle title={t('services.title')} subtitle={t('services.subtitle')} />
  </div>

  <!-- Course Content -->
  <div class="max-w-7xl mx-auto w-full mt-8 service-carousel-container" data-animate="carousel">
    <div class="relative overflow-x-hidden overflow-y-visible">
      <!-- 整個區塊輪播容器 -->
      <div class="flex transition-transform duration-500 ease-in-out" id="service-sections-container">

        {services.map((service, index) => (
          <div class="min-w-full max-w-full flex-shrink-0 min-h-[540px] lg:min-h-[480px] overflow-x-hidden" data-service={index.toString()}>
            <!-- Course Content - 置中重疊佈局 -->
            <div class="relative max-w-5xl mx-auto px-4 pb-32 lg:pb-0">

              <!-- Image (Background) -->
              <div class="flex justify-center lg:justify-end max-w-full overflow-hidden">
                <div class="relative h-[400px] lg:h-[480px] w-full lg:w-[700px] overflow-hidden rounded-3xl shadow-2xl">
                  <!-- Mobile Image -->
                  <img
                    src={service?.cover?.mobile || service?.cover?.desktop || 'https://hamahairspa.com/wp-content/uploads/2024/06/%E5%A4%A7treating-facial-skin-by-massage-cosmetological-clinic.jpeg'}
                    alt={service?.sub_title || t('courses.service-intro')}
                    class="w-full h-full object-cover transition-transform duration-700 md:hidden"
                    loading="lazy"
                  />
                  <!-- Desktop Image -->
                  <img
                    src={service?.cover?.desktop || service?.cover?.mobile || 'https://hamahairspa.com/wp-content/uploads/2024/06/%E5%A4%A7treating-facial-skin-by-massage-cosmetological-clinic.jpeg'}
                    alt={service?.sub_title || t('courses.service-intro')}
                    class="w-full h-full object-cover transition-transform duration-700 hidden md:block"
                    loading="lazy"
                  />
                </div>
              </div>

              <!-- Course Card (Overlapping) -->
              <div class="absolute left-1/2 -translate-x-1/2 -translate-y-16 w-[calc(100%-2rem)] max-w-[380px] lg:left-4 lg:top-1/2 lg:-translate-y-1/2 lg:-translate-x-0 lg:w-[420px] lg:max-w-none z-10">
                <div class="bg-primary-600/50 backdrop-blur-sm rounded-3xl p-6 lg:p-8 text-center shadow-xl h-[200px] lg:h-[280px] flex flex-col justify-center">
                  <div class={`space-y-4 ${isEnglish ? 'space-y-3' : ''}`}>
                    <h3 class={`text-black dark:text-white font-light tracking-wide ${isEnglish ? 'text-2xl lg:text-3xl leading-tight' : 'text-3xl lg:text-4xl'}`}>
                      {service.title}
                    </h3>
                    <p class={`text-gray-200 dark:text-gray-700 font-light leading-relaxed ${isEnglish ? 'text-sm lg:text-base line-clamp-3' : 'text-base lg:text-lg'}`}>
                      {service.sub_title}
                    </p>

                    <!-- CTA Button -->
                    <div class="pt-2 flex justify-center">
                      <a href={getLinkByLocale(`/services/${service.id}/items`)} class={`group bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-primary-foreground rounded-full font-medium tracking-wide transition-all duration-300 hover:scale-105 flex items-center space-x-2 ${isEnglish ? 'px-6 py-2.5 text-sm' : 'px-8 py-3 text-base'}`}>
                        <span data-i18n="courses.service-intro">{t('courses.service-intro')}</span>
                      </a>
                    </div>
                  </div>
                </div>
              </div>

            </div>
          </div>
        ))}

      </div>

      <!-- Navigation Controls - 左右兩側 -->
      <button
        class="absolute left-4 w-12 h-12 rounded-full flex items-center justify-center text-white z-[5] transition-all duration-200 hover:scale-110 active:scale-95 bg-black/60 hover:bg-black/80 backdrop-blur-sm disabled:opacity-30 disabled:cursor-not-allowed pointer-events-auto"
        style="top: 50%; transform: translateY(-50%);"
        aria-label="上一頁"
        id="prev-service"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      <button
        class="absolute right-4 w-12 h-12 rounded-full flex items-center justify-center text-white z-[5] transition-all duration-200 hover:scale-110 active:scale-95 bg-black/60 hover:bg-black/80 backdrop-blur-sm disabled:opacity-30 disabled:cursor-not-allowed pointer-events-auto"
        style="top: 50%; transform: translateY(-50%);"
        aria-label="下一頁"
        id="next-service"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>

    </div>
  </div>
</section>

<script is:inline define:vars={{ services }}>
  // Course data from API
  // @ts-ignore - services is passed from Astro define:vars
  const servicesData = services || []

  let currentCourseIndex = 0

  // DOM ready
  document.addEventListener('DOMContentLoaded', () => {
    const prevButton = document.getElementById('prev-service')
    const nextButton = document.getElementById('next-service')
    const sectionsContainer = document.getElementById('service-sections-container')

    // Update service display
    function updateCourse(index) {
      const service = servicesData[index]
      if (!service) return

      // Slide entire sections container
      if (sectionsContainer) {
        const translateX = -100 * index
        sectionsContainer.style.transform = `translateX(${translateX}%)`
      }

      // 循環播放，不需要禁用按鈕
      if (prevButton) {
        prevButton.disabled = false
      }
      if (nextButton) {
        nextButton.disabled = false
      }
    }

    // Navigation events - 循環播放
    if (prevButton) {
      prevButton.addEventListener('click', () => {
        currentCourseIndex = currentCourseIndex > 0 ? currentCourseIndex - 1 : servicesData.length - 1
        updateCourse(currentCourseIndex)
      })
    }

    if (nextButton) {
      nextButton.addEventListener('click', () => {
        currentCourseIndex = currentCourseIndex < servicesData.length - 1 ? currentCourseIndex + 1 : 0
        updateCourse(currentCourseIndex)
      })
    }

    // Touch/Swipe functionality for mobile
    let startX = 0
    let startY = 0
    let currentX = 0
    let isDragging = false
    let isSwiping = false

    if (sectionsContainer) {
      // Touch events
      sectionsContainer.addEventListener('touchstart', e => {
        // 如果觸碰的是連結或按鈕，不要攔截
        const target = e.target
        if (target.closest('a') || target.closest('button')) {
          return
        }

        startX = e.touches[0].clientX
        startY = e.touches[0].clientY
        isDragging = true
        isSwiping = false
      })

      sectionsContainer.addEventListener('touchmove', e => {
        if (!isDragging) return

        currentX = e.touches[0].clientX
        const currentY = e.touches[0].clientY
        const diffX = Math.abs(currentX - startX)
        const diffY = Math.abs(currentY - startY)

        // 只有當水平滑動距離大於垂直滑動時才啟動輪播
        if (diffX > diffY && diffX > 10) {
          isSwiping = true
          e.preventDefault() // 防止頁面滾動

          sectionsContainer.style.transition = 'none'
          const diff = currentX - startX
          const currentTranslate = -100 * currentCourseIndex
          const newTranslate = currentTranslate + (diff / sectionsContainer.offsetWidth) * 100
          sectionsContainer.style.transform = `translateX(${newTranslate}%)`
        }
      })

      sectionsContainer.addEventListener('touchend', () => {
        if (!isDragging) return
        isDragging = false

        if (!isSwiping) {
          // 不是滑動操作，可能是點擊，不做處理
          return
        }

        sectionsContainer.style.transition = 'transform 0.5s ease-in-out'

        const diff = currentX - startX
        const threshold = 50

        if (diff > threshold) {
          // 向右滑動 - 上一張 (循環)
          currentCourseIndex = currentCourseIndex > 0 ? currentCourseIndex - 1 : servicesData.length - 1
        } else if (diff < -threshold) {
          // 向左滑動 - 下一張 (循環)
          currentCourseIndex = currentCourseIndex < servicesData.length - 1 ? currentCourseIndex + 1 : 0
        }

        updateCourse(currentCourseIndex)
        isSwiping = false
      })

      // Mouse events for desktop
      sectionsContainer.addEventListener('mousedown', e => {
        startX = e.clientX
        isDragging = true
        sectionsContainer.style.transition = 'none'
        sectionsContainer.style.cursor = 'grabbing'
      })

      sectionsContainer.addEventListener('mousemove', e => {
        if (!isDragging) return
        e.preventDefault()
        currentX = e.clientX
        const diff = currentX - startX
        const currentTranslate = -100 * currentCourseIndex
        const newTranslate = currentTranslate + (diff / sectionsContainer.offsetWidth) * 100
        sectionsContainer.style.transform = `translateX(${newTranslate}%)`
      })

      sectionsContainer.addEventListener('mouseup', () => {
        if (!isDragging) return
        isDragging = false
        sectionsContainer.style.transition = 'transform 0.5s ease-in-out'
        sectionsContainer.style.cursor = 'grab'

        const diff = currentX - startX
        const threshold = 50

        if (diff > threshold) {
          // 向右拖動 - 上一張 (循環)
          currentCourseIndex = currentCourseIndex > 0 ? currentCourseIndex - 1 : servicesData.length - 1
        } else if (diff < -threshold) {
          // 向左拖動 - 下一張 (循環)
          currentCourseIndex = currentCourseIndex < servicesData.length - 1 ? currentCourseIndex + 1 : 0
        }

        updateCourse(currentCourseIndex)
      })

      sectionsContainer.addEventListener('mouseleave', () => {
        if (isDragging) {
          isDragging = false
          sectionsContainer.style.transition = 'transform 0.5s ease-in-out'
          sectionsContainer.style.cursor = 'grab'
          updateCourse(currentCourseIndex)
        }
      })

      // Set initial cursor
      sectionsContainer.style.cursor = 'grab'
    }

    // Auto-play functionality
    let autoPlayInterval
    const startAutoPlay = () => {
      autoPlayInterval = setInterval(() => {
        currentCourseIndex = (currentCourseIndex + 1) % servicesData.length
        updateCourse(currentCourseIndex)
      }, 2600)
    }

    const stopAutoPlay = () => {
      if (autoPlayInterval) {
        clearInterval(autoPlayInterval)
      }
    }

    // Start auto-play
    startAutoPlay()

    // Pause auto-play on hover
    const serviceSection = document.getElementById('services')
    if (serviceSection) {
      serviceSection.addEventListener('mouseenter', stopAutoPlay)
      serviceSection.addEventListener('mouseleave', startAutoPlay)
    }

    // Initialize
    updateCourse(currentCourseIndex)
  })
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const titleElement = document.querySelector('.service-section-title')
    const carouselElement = document.querySelector('.service-carousel-container')

    // 創建 Intersection Observer
    const observer = new IntersectionObserver(
      entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            // 添加動畫類
            entry.target.classList.add('animate-in')

            // 動畫完成後停止觀察
            observer.unobserve(entry.target)
          }
        })
      },
      {
        threshold: 0.3, // 當元素 30% 可見時觸發
        rootMargin: '0px 0px -50px 0px', // 提前觸發動畫
    }
    )

    // 開始觀察標題和輪播
    if (titleElement) {
      observer.observe(titleElement)
    }
    if (carouselElement) {
      observer.observe(carouselElement)
    }
  })
</script>

<style>
  /* Service Section Title Animation */
  .service-section-title {
    opacity: 0;
    transform: translateX(-50px) translateY(30px);
    transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .service-section-title.animate-in {
    opacity: 1;
    transform: translateX(0) translateY(0);
  }

  /* 分別控制主標題和副標題的動畫 */
  .service-section-title :global(h2) {
    opacity: 0;
    transform: translateX(-60px);
    transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    transition-delay: 0.2s;
  }

  .service-section-title :global(h3) {
    opacity: 0;
    transform: translateY(40px);
    transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    transition-delay: 0.4s;
  }

  .service-section-title.animate-in :global(h2) {
    opacity: 1;
    transform: translateX(0);
  }

  .service-section-title.animate-in :global(h3) {
    opacity: 1;
    transform: translateY(0);
  }

  /* Service Carousel Animation */
  .service-carousel-container {
    opacity: 0;
    transform: translateY(60px);
    transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    transition-delay: 0.6s; /* 在標題動畫後開始 */
  }

  .service-carousel-container.animate-in {
    opacity: 1;
    transform: translateY(0);
  }

  /* Smooth transitions for all elements */
  #service-image {
    transition: all 0.7s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Course sections container */
  #service-sections-container {
    transition: transform 0.5s ease-in-out;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }

  /* Individual service cards */
  .service-card {
    flex-shrink: 0;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
  }

  .service-card:hover {
    transform: translateY(-3px) scale(1.02);
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
  }

  /* Button hover effects */
  button:hover {
    transform: translateY(-1px);
  }

  /* Disable text selection during drag */
  .no-select {
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }

  /* Animation for content changes */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fadeIn 0.6s ease-out;
  }

  /* Touch-friendly navigation buttons */
  @media (max-width: 768px) {
    #prev-service,
    #next-service {
      width: 44px;
      height: 44px;
      touch-action: manipulation;
    }
  }

  /* Line clamp utilities for text overflow */
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Responsive text adjustments for English */
  .en-locale {
    word-break: break-word;
    hyphens: auto;
  }

  /* Better spacing for English content */
  .service-card-english {
    padding: 1rem 1.25rem;
  }

  @media (min-width: 1024px) {
    .service-card-english {
      padding: 1.5rem 2rem;
    }
  }
</style>
