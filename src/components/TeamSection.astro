---
import { gql, graphQLAPI } from '@/api'
import SectionTitle from '@/components/ui/SectionTitle.astro'
import { createAstroT } from '@/utils/astro-i18n'
import type { TeamMember, TeamsResponse } from '@/types'

// GraphQL 查詢與錯誤處理
let teamMembers: TeamMember[] = []

try {
  const teamsData: TeamsResponse = await graphQLAPI(gql`
    query MyQuery {
      teams(sort_by: "asc", sort_column: "sort", slug_tags:"weekly-recommended") {
        data {
          id
          images {
            created_at
            id
            image {
              desktop
              desktop_blur
              mobile
              mobile_blur
            }
            updated_at
            is_default
          }
          image {
            desktop
            desktop_blur
            mobile
            mobile_blur
          }
          tags {
            data {
              id
              title
              slug
            }
          }
          title
          category {
            title
          }
        }
      }
    }
  `)

  teamMembers = teamsData.teams.data || []
} catch (error) {
  console.error('Failed to fetch team data:', error)
  // 如果 API 失敗，提供預設資料
  teamMembers = [
    {
      id: 1,
      title: '專業團隊',
      category: { title: '服務專員' },
      cover: {
        desktop: '/images/default-team.jpg',
        desktop_blur: '/images/default-team-blur.jpg',
        mobile: '/images/default-team-mobile.jpg',
        mobile_blur: '/images/default-team-mobile-blur.jpg',
      },
      images: [],
      image: {
        desktop: '/images/default-team.jpg',
        desktop_blur: '/images/default-team-blur.jpg',
        mobile: '/images/default-team-mobile.jpg',
        mobile_blur: '/images/default-team-mobile-blur.jpg',
      },
      tags: { data: [] },
    },
  ]
}

const t = createAstroT(Astro)
---
<section
  class="relative w-full min-h-[80vh] flex flex-col justify-center py-4 px-4 md:px-6 lg:px-8 md:py-8 lg:py-16"
  id="team"
  data-section="team"
>

  <!-- 標題區 -->
  <SectionTitle title="本週推薦" subtitle="RECOMMENDED" />

  <!-- Airbnb 風格卡片網格 -->
  <div class="max-w-7xl mx-auto w-full">
    <!-- 桌面和平板：網格布局 -->
    <div class="hidden sm:grid grid-cols-2 lg:grid-cols-3 gap-6">
      {teamMembers.map(member => (
        <div
          class="group cursor-pointer transition-transform duration-300 hover:-translate-y-2"
          onclick={`window.location.href='/team/${member.id}'`}
        >
          <!-- 圖片容器 -->
          <div class="relative w-full aspect-square rounded-xl overflow-hidden mb-4">

            <!-- 團隊成員照片轮播 -->
            <div
              class="carousel-container relative w-full h-full overflow-hidden backface-visibility-hidden"
              data-member-id={member.title}
            >
              <div class="carousel-images absolute inset-0 backface-visibility-hidden">
                {/* 主图片 */}
                <picture
                  class="carousel-slide block w-full h-full absolute inset-0 opacity-100 transition-opacity duration-500 ease-in-out"
                >
                  <source media="(max-width: 768px)" srcset={member.image?.mobile || member.cover?.mobile} />
                  <img
                    src={member.image?.desktop || member.cover?.desktop}
                    alt={member.title}
                    loading="lazy"
                    onload="this.style.filter='none'"
                    style="filter: blur(5px); transition: filter 0.3s ease;"
                    class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                  />
                </picture>

                {/* 轮播图片 - 排除is_default=true的图片 */}
                {member.images && member.images.length > 0 && member.images
                  .filter(imageItem => !imageItem.is_default)
                  .map((imageItem, imgIndex) => (
                    <picture
                      class="carousel-slide block w-full h-full absolute inset-0 opacity-0 transition-opacity duration-500 ease-in-out"
                    >
                      <source media="(max-width: 768px)" srcset={imageItem.image.mobile} />
                      <img
                        src={imageItem.image.desktop}
                        alt={`${member.title} - Image ${imgIndex + 1}`}
                        loading="lazy"
                        onload="this.style.filter='none'"
                        style="filter: blur(5px); transition: filter 0.3s ease;"
                        class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                      />
                    </picture>
                  ))}
              </div>

              {/* 轮播指示器 */}
              {member.images && member.images.filter(imageItem => !imageItem.is_default).length > 0 && (
                <div class="carousel-dots absolute bottom-2 left-1/2 -translate-x-1/2 flex gap-1 z-10">
                  <div
                    class="carousel-dot w-1.5 h-1.5 rounded-full bg-white/80 cursor-pointer transition-all duration-200 hover:scale-125 active"
                  ></div>
                  {member.images.filter(imageItem => !imageItem.is_default).map(_ => (
                    <div
                      class="carousel-dot w-1.5 h-1.5 rounded-full bg-white/40 cursor-pointer transition-all duration-200 hover:bg-white/60 hover:scale-125"
                    ></div>
                  ))}
                </div>
              )}
            </div>

            <!-- 評級標籤 (左下角) -->
            <div
              class="absolute bottom-3 left-3 bg-black/70 text-white px-2 py-1 rounded-md text-xs font-medium backdrop-blur-sm"
            >
              ⭐ {member.category.title}
            </div>
          </div>

          <!-- 卡片資訊 -->
          <div class="space-y-1">
            <!-- 標題和評分 -->
            <div class="flex items-start justify-between">
              <h3
                class="text-base font-semibold leading-tight line-clamp-1 flex-1 mr-2"
                style="color: var(--theme-text)"
              >
                {member.title}
              </h3>
            </div>
          </div>
        </div>
      ))}
    </div>

    <!-- 手機版：整體輪播布局 -->
    <div class="sm:hidden">
      <div class="mobile-team-carousel relative overflow-hidden">
        <!-- 輪播容器 -->
        <div class="mobile-carousel-track flex transition-transform duration-500 ease-out">
          {teamMembers.map((member, memberIndex) => (
            <div
              class="mobile-carousel-slide w-full flex-shrink-0 px-4"
              data-slide={memberIndex}
            >
              <div
                class="group cursor-pointer transition-transform duration-300 hover:-translate-y-2 mx-auto max-w-sm"
                onclick={`window.location.href='/team/${member.id}'`}
              >
                <!-- 圖片容器 -->
                <div class="relative w-full aspect-square rounded-xl overflow-hidden mb-4">

                  <!-- 團隊成員照片轮播 -->
                  <div
                    class="carousel-container relative w-full h-full overflow-hidden backface-visibility-hidden"
                    data-member-id={`${member.title}-mobile`}
                  >
                    <div class="carousel-images absolute inset-0 backface-visibility-hidden">
                      {/* 主图片 */}
                      <picture
                        class="carousel-slide block w-full h-full absolute inset-0 opacity-100 transition-opacity duration-500 ease-in-out"
                      >
                        <source media="(max-width: 768px)" srcset={member.image?.mobile || member.cover?.mobile} />
                        <img
                          src={member.image?.desktop || member.cover?.desktop}
                          alt={member.title}
                          loading="lazy"
                          onload="this.style.filter='none'"
                          style="filter: blur(5px); transition: filter 0.3s ease;"
                          class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                        />
                      </picture>

                      {/* 轮播图片 - 排除is_default=true的图片 */}
                      {member.images && member.images.length > 0 && member.images
                        .filter(imageItem => !imageItem.is_default)
                        .map((imageItem, imgIndex) => (
                          <picture
                            class="carousel-slide block w-full h-full absolute inset-0 opacity-0 transition-opacity duration-500 ease-in-out"
                          >
                            <source media="(max-width: 768px)" srcset={imageItem.image.mobile} />
                            <img
                              src={imageItem.image.desktop}
                              alt={`${member.title} - Image ${imgIndex + 1}`}
                              loading="lazy"
                              onload="this.style.filter='none'"
                              style="filter: blur(5px); transition: filter 0.3s ease;"
                              class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                            />
                          </picture>
                        ))}
                    </div>

                    {/* 轮播指示器 */}
                    {member.images && member.images.filter(imageItem => !imageItem.is_default).length > 0 && (
                      <div class="carousel-dots absolute bottom-2 left-1/2 -translate-x-1/2 flex gap-1 z-10">
                        <div
                          class="carousel-dot w-1.5 h-1.5 rounded-full bg-white/80 cursor-pointer transition-all duration-200 hover:scale-125 active"
                        ></div>
                        {member.images.filter(imageItem => !imageItem.is_default).map(() => (
                          <div
                            class="carousel-dot w-1.5 h-1.5 rounded-full bg-white/40 cursor-pointer transition-all duration-200 hover:bg-white/60 hover:scale-125"
                          ></div>
                        ))}
                      </div>
                    )}
                  </div>

                  <!-- 評級標籤 (左下角) -->
                  <div
                    class="absolute bottom-3 left-3 bg-black/70 text-white px-2 py-1 rounded-md text-xs font-medium backdrop-blur-sm"
                  >
                    ⭐ {member.category.title}
                  </div>
                </div>

                <!-- 卡片資訊 -->
                <div class="space-y-1">
                  <!-- 標題和評分 -->
                  <div class="flex items-start justify-between">
                    <h3
                      class="text-base font-semibold leading-tight line-clamp-1 flex-1 mr-2"
                      style="color: var(--theme-text)"
                    >
                      {member.title}
                    </h3>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        <!-- 輪播指示器 -->
        <div class="mobile-carousel-dots flex justify-center mt-4 gap-2">
          {teamMembers.map((_, index) => (
            <button
              class="mobile-dot w-2.5 h-2.5 rounded-full transition-all duration-300 hover:scale-110"
              style="background-color: var(--theme-text); opacity: 0.3; transform: scale(1);"
              data-slide={index}
            ></button>
          ))}
        </div>

        <!-- 導航按鈕 -->
        <button
          class="mobile-carousel-prev absolute left-2 top-1/2 -translate-y-1/2 w-10 h-10 rounded-full flex items-center justify-center text-white z-10 transition-all duration-200 hover:scale-110 active:scale-95"
          style="background-color: rgba(0,0,0,0.6); backdrop-filter: blur(8px);"
        >
          ←
        </button>
        <button
          class="mobile-carousel-next absolute right-2 top-1/2 -translate-y-1/2 w-10 h-10 rounded-full flex items-center justify-center text-white z-10 transition-all duration-200 hover:scale-110 active:scale-95"
          style="background-color: rgba(0,0,0,0.6); backdrop-filter: blur(8px);"
        >
          →
        </button>
      </div>
    </div>
  </div>

  <!-- 查看更多按鈕 -->
  <div class="mt-12 max-w-7xl mx-auto w-full">
    <button
      class="px-6 py-3 border rounded-lg font-medium transition-all duration-200 hover:scale-105"
      style="border-color: var(--theme-text); color: var(--theme-text); background-color: transparent;"
      onmouseover="this.style.backgroundColor=getComputedStyle(document.documentElement).getPropertyValue('--theme-text'); this.style.color=getComputedStyle(document.documentElement).getPropertyValue('--theme-bg');"
      onmouseout="this.style.backgroundColor='transparent'; this.style.color=getComputedStyle(document.documentElement).getPropertyValue('--theme-text');"
    >
<span data-i18n="team.more-members">{t('team.more-members')}</span>
    </button>
  </div>

  <!-- Marquee Section -->
  <div class="mt-16 overflow-hidden bg-gray-500/30">
    <div class="py-4">
      <div class="marquee-container">
        <div class="marquee-content flex items-center space-x-8 animate-marquee">
          <span class="text-white font-medium whitespace-nowrap">專業服務團隊</span>
          <span class="text-white/70">•</span>
          <span class="text-white font-medium whitespace-nowrap">頂級 SPA 體驗</span>
          <span class="text-white/70">•</span>
          <span class="text-white font-medium whitespace-nowrap">個人化服務</span>
          <span class="text-white/70">•</span>
          <span class="text-white font-medium whitespace-nowrap">專業認證技師</span>
          <span class="text-white/70">•</span>
          <span class="text-white font-medium whitespace-nowrap">舒適私密環境</span>
          <span class="text-white/70">•</span>
          <span class="text-white font-medium whitespace-nowrap">全預約制服務</span>
          <span class="text-white/70">•</span>
          <span class="text-white font-medium whitespace-nowrap">專業服務團隊</span>
          <span class="text-white/70">•</span>
          <span class="text-white font-medium whitespace-nowrap">頂級 SPA 體驗</span>
          <span class="text-white/70">•</span>
          <span class="text-white font-medium whitespace-nowrap">個人化服務</span>
          <span class="text-white/70">•</span>
          <span class="text-white font-medium whitespace-nowrap">專業認證技師</span>
          <span class="text-white/70">•</span>
          <span class="text-white font-medium whitespace-nowrap">舒適私密環境</span>
          <span class="text-white/70">•</span>
          <span class="text-white font-medium whitespace-nowrap">全預約制服務</span>
        </div>
      </div>
    </div>
  </div>

</section>

<script>
  // 团队图片轮播功能
  document.addEventListener('DOMContentLoaded', () => {
    // 初始化所有轮播容器
    const carouselContainers = document.querySelectorAll('.carousel-container')

  carouselContainers.forEach(container => {
      const slides = container.querySelectorAll('.carousel-slide')
    const dots = container.querySelectorAll('.carousel-dot')

    if (slides.length <= 1) return // 只有一张图片时不需要轮播

    let currentSlide = 0
    let autoSlideTimer = null

    // 显示指定的幻灯片
    function showSlide(index) {
        // 隐藏所有幻灯片
        slides.forEach(slide => {
          slide.style.opacity = '0'
      })

      // 重置所有指示器
      dots.forEach(dot => {
          dot.classList.remove('active');
          dot.style.backgroundColor = 'rgba(255, 255, 255, 0.4)'
      })

      // 显示当前幻灯片
      if (slides[index]) {
          slides[index].style.opacity = '1'
      }

        // 激活当前指示器
        if (dots[index]) {
          dots[index].classList.add('active');
          dots[index].style.backgroundColor = 'rgba(255, 255, 255, 0.8)'
      }
      }

      // 下一张幻灯片
      function nextSlide() {
        currentSlide = (currentSlide + 1) % slides.length
      showSlide(currentSlide)
    }

      // 自动轮播
      function startAutoSlide() {
        autoSlideTimer = setInterval(nextSlide, 3000) // 每3秒切换
    }

      function stopAutoSlide() {
        if (autoSlideTimer) {
          clearInterval(autoSlideTimer)
        autoSlideTimer = null
      }
      }

      // 指示器点击事件
      dots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
          currentSlide = index
        showSlide(currentSlide)
        stopAutoSlide()
        startAutoSlide() // 重新开始自动轮播
      })
    })

    // 鼠标悬停时暂停轮播
    container.addEventListener('mouseenter', stopAutoSlide)
    container.addEventListener('mouseleave', startAutoSlide)

    // 触摸事件支持（移动设备）
    let startX = 0
    let isDragging = false

    container.addEventListener('touchstart', e => {
      startX = e.touches[0].clientX
      isDragging = true
      stopAutoSlide()
    })

    container.addEventListener('touchmove', e => {
        if (!isDragging) return
      e.preventDefault()
    })

    container.addEventListener('touchend', e => {
        if (!isDragging) return

      const endX = e.changedTouches[0].clientX
      const diffX = startX - endX

      if (Math.abs(diffX) > 50) { // 最小滑动距离
          if (diffX > 0) {
            // 向左滑动，下一张
            nextSlide()
        } else {
            // 向右滑动，上一张
            currentSlide = currentSlide === 0 ? slides.length - 1 : currentSlide - 1
          showSlide(currentSlide)
        }
        }

        isDragging = false
      startAutoSlide()
    })

    // 初始化显示第一张幻灯片
    showSlide(0)

    // 开始自动轮播
    startAutoSlide()
  })

    // 手機版整體輪播功能
    const mobileCarousel = document.querySelector('.mobile-team-carousel')
    if (mobileCarousel) {
      const track = mobileCarousel.querySelector('.mobile-carousel-track')
      const slides = mobileCarousel.querySelectorAll('.mobile-carousel-slide')
      const dots = mobileCarousel.querySelectorAll('.mobile-dot')
      const prevBtn = mobileCarousel.querySelector('.mobile-carousel-prev')
      const nextBtn = mobileCarousel.querySelector('.mobile-carousel-next')
      
      if (slides.length <= 1) return // 只有一張時不需要輪播
      
      let currentIndex = 0
      let mobileAutoTimer = null
      
      // 更新輪播位置
      function updateCarouselPosition() {
        const translateX = -currentIndex * 100
        track.style.transform = `translateX(${translateX}%)`
        
        // 更新指示器
        dots.forEach((dot, index) => {
          if (index === currentIndex) {
            dot.style.opacity = '1'
            dot.style.transform = 'scale(1.2)'
          } else {
            dot.style.opacity = '0.3'
            dot.style.transform = 'scale(1)'
          }
        })
      }
      
      // 下一張
      function nextMobileSlide() {
        currentIndex = (currentIndex + 1) % slides.length
        updateCarouselPosition()
      }
      
      // 上一張
      function prevMobileSlide() {
        currentIndex = currentIndex === 0 ? slides.length - 1 : currentIndex - 1
        updateCarouselPosition()
      }
      
      // 自動輪播
      function startMobileAutoSlide() {
        if (mobileAutoTimer) {
          clearInterval(mobileAutoTimer)
        }
        mobileAutoTimer = setInterval(() => {
          nextMobileSlide()
        }, 5000) // 每5秒切換
      }
      
      function stopMobileAutoSlide() {
        if (mobileAutoTimer) {
          clearInterval(mobileAutoTimer)
          mobileAutoTimer = null
        }
      }
      
      // 按鈕事件
      nextBtn?.addEventListener('click', () => {
        nextMobileSlide()
        stopMobileAutoSlide()
        startMobileAutoSlide()
      })
      
      prevBtn?.addEventListener('click', () => {
        prevMobileSlide()
        stopMobileAutoSlide()
        startMobileAutoSlide()
      })
      
      // 指示器點擊
      dots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
          currentIndex = index
          updateCarouselPosition()
          stopMobileAutoSlide()
          startMobileAutoSlide()
        })
      })
      
      // 觸控滑動支援
      let touchStartX = 0
      let touchIsDragging = false
      
      mobileCarousel.addEventListener('touchstart', (e) => {
        touchStartX = e.touches[0].clientX
        touchIsDragging = true
        stopMobileAutoSlide()
      })
      
      mobileCarousel.addEventListener('touchend', (e) => {
        if (!touchIsDragging) return
        
        const touchEndX = e.changedTouches[0].clientX
        const diffX = touchStartX - touchEndX
        
        // 檢測滑動距離
        if (Math.abs(diffX) > 50) {
          if (diffX > 0) {
            // 向左滑動，下一張
            nextMobileSlide()
          } else {
            // 向右滑動，上一張
            prevMobileSlide()
          }
        }
        
        touchIsDragging = false
        startMobileAutoSlide()
      })
      
      updateCarouselPosition()
      
      // 延遲啟動自動輪播，確保頁面完全載入
      setTimeout(() => {
        startMobileAutoSlide()
      }, 1000)
      
      // 暫停/恢復自動輪播
      mobileCarousel.addEventListener('mouseenter', stopMobileAutoSlide)
      mobileCarousel.addEventListener('mouseleave', startMobileAutoSlide)
    }
})
</script>

<style>
  .backface-visibility-hidden {
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
  }

  .carousel-dot.active {
    background-color: rgba(255, 255, 255, 0.8) !important;
    transform: scale(1.1);
  }

  /* Marquee Animation */
  .marquee-container {
    width: 100%;
    overflow: hidden;
  }

  .marquee-content {
    display: flex;
    animation: marquee 30s linear infinite;
    white-space: nowrap;
  }

  @keyframes marquee {
    0% {
      transform: translateX(100%);
    }
    100% {
      transform: translateX(-100%);
    }
  }

  /* Pause animation on hover */
  .marquee-container:hover .marquee-content {
    animation-play-state: paused;
  }
</style>
