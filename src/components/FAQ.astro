---
import { createNestedT } from '@/utils/i18n'

const t = await createNestedT()

export interface FaqItem {
    id: string
    title: string
    content: string
}

interface Props {
    faqs: FaqItem[]
}

const { faqs } = Astro.props
---
{faqs && faqs.length > 0 ? (
<div id="faq-accordion">
    {faqs.map(faq => (
    <div class="border-b border-primary-500" :key={faq.id}>
        <button
          type="button"
          class="flex items-center justify-between w-full py-5 font-medium transition-all duration-300 hover:bg-gradient-to-r hover:from-transparent hover:via-primary-500/[0.03] hover:to-transparent gap-3 faq-toggle group"
          data-target={`faq-body-${faq.id}`}
        >
            <span class="text-lg font-bold text-left break-keep text-black dark:text-white">
              {faq.title}
            </span>
            <svg
              class="w-4 h-4 transition-transform duration-500 ease-out group-hover:scale-110 shrink-0"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 10 6"
              class="text-primary-600"
            >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 5 5 1 1 5"
                />
            </svg>
        </button>
        <div id={`faq-body-${faq.id}`} class="overflow-hidden max-h-0">
            <div class="px-6 pb-6 pt-2">
                <div class="faq-content-inner opacity-0 leading-relaxed" data-content={faq.content}></div>
            </div>
        </div>
    </div>
    ))}
</div>
 ) : (
<div class="text-center py-16">
    <div class="max-w-md mx-auto">
        <div class="mb-6">
            <svg class="mx-auto h-16 w-16 opacity-30 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9 5.25h.008v.008H12v-.008z" />
            </svg>
        </div>
        <h3 class="text-xl font-medium mb-2 text-black dark:text-white">
            {t('faq.empty.title')}
        </h3>
        <p class="text-sm leading-relaxed text-gray-600 dark:text-gray-400">
            {t('faq.empty.description')}
        </p>
    </div>
</div>
    )}

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const toggles = document.querySelectorAll('.faq-toggle')

        // 優化的打字機效果函數
        function typewriterEffect(element: HTMLElement, text: string, speed: number = 25) {
            element.innerHTML = ''
            let i = 0

            // 創建文字容器和游標
            const textContainer = document.createElement('span')
            const cursor = document.createElement('span')
            cursor.textContent = '|'
            cursor.style.cssText = `
                animation: blink 1s infinite;
                /* Color handled by Tailwind: text-primary-600 */
                font-weight: bold;
                margin-left: 1px;
            `

            element.appendChild(textContainer)
            element.appendChild(cursor)

            function type() {
                if (i < text.length) {
                    const char = text.charAt(i)
                    textContainer.textContent += char
                    i++

                    // 使用 requestAnimationFrame 讓打字更流暢
                    const nextSpeed = (char === '。' || char === '，' || char === '！' || char === '？') ? speed * 2 : speed
                    setTimeout(() => requestAnimationFrame(type), nextSpeed)
                } else {
                    // 打字完成，游標淡出
                    setTimeout(() => {
                        if (element.contains(cursor)) {
                            cursor.animate(
                                [{ opacity: 1 }, { opacity: 0 }],
                                { duration: 500, easing: 'ease-out', fill: 'forwards' }
                            ).addEventListener('finish', () => {
                                if (element.contains(cursor)) {
                                    element.removeChild(cursor)
                                }
                            })
                        }
                    }, 1000)
                }
            }

            // 立即開始打字
            requestAnimationFrame(type)
        }

        // 將 HTML 轉為純文字
        function stripHtml(html: string): string {
            const tmp = document.createElement('div')
            tmp.innerHTML = html
            return tmp.textContent || ''
        }

        // 使用 Web Animations API 實現更流暢的動畫
        function smoothExpand(element: HTMLElement) {
            const content = element.querySelector('.faq-content-inner') as HTMLElement

            // 計算目標高度
            if (content) {
                const htmlContent = content.getAttribute('data-content') || ''
                const plainText = stripHtml(htmlContent)
                content.textContent = plainText
                content.style.opacity = '0'
            }

            element.style.maxHeight = 'none'
            const targetHeight = element.scrollHeight
            element.style.maxHeight = '0px'

            // 清空內容準備打字機效果
            if (content) {
                content.innerHTML = ''
            }

            // 使用 Web Animations API
            const expandAnimation = element.animate(
                [
                    { maxHeight: '0px' },
                    { maxHeight: `${targetHeight}px` },
            ],
                {
                    duration: 500,
                    easing: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
                    fill: 'forwards',
            }
            )

            // 同時進行內容淡入和打字機效果
            expandAnimation.addEventListener('finish', () => {
                if (content) {
                    // 內容淡入
                    const fadeInAnimation = content.animate(
                        [
                            { opacity: 0 },
                            { opacity: 1 },
                    ],
                        {
                            duration: 200,
                            easing: 'ease-out',
                            fill: 'forwards',
                    }
                    )

                    // 開始打字機效果
                    const htmlContent = content.getAttribute('data-content') || ''
                    const plainText = stripHtml(htmlContent)
                    typewriterEffect(content, plainText, 20)
                }
            })
        }

        // 使用 Web Animations API 實現收合動畫
        function smoothCollapse(element: HTMLElement) {
            const content = element.querySelector('.faq-content-inner') as HTMLElement
            const currentHeight = element.scrollHeight

            // 內容淡出
            if (content) {
                content.animate(
                    [
                        { opacity: 1 },
                        { opacity: 0 },
                ],
                    {
                        duration: 150,
                        easing: 'ease-out',
                        fill: 'forwards',
                }
                )

                // 清空內容
                setTimeout(() => {
                    content.innerHTML = ''
                }, 150)
            }

            // 高度收合動畫
            const collapseAnimation = element.animate(
                [
                    { maxHeight: `${currentHeight}px` },
                    { maxHeight: '0px' },
            ],
                {
                    duration: 350,
                    easing: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
                    fill: 'forwards',
            }
            )
        }

        // 添加狀態追蹤
        const expandedStates = new Map()

        toggles.forEach(btn => {
            btn.addEventListener('click', () => {
                const targetId = btn.getAttribute('data-target')
                if (!targetId) return
                const target = document.getElementById(targetId)
                const isExpanded = expandedStates.get(targetId) || false

                // 關閉其他項目
                document.querySelectorAll('#faq-accordion div[id^=\'faq-body-\']').forEach(el => {
                    const element = el as HTMLElement
                    const elementId = element.id

                    if (elementId !== targetId && expandedStates.get(elementId)) {
                        smoothCollapse(element)
                        expandedStates.set(elementId, false)

                        const otherBtn = el.previousElementSibling
                        if (otherBtn && otherBtn.querySelector) {
                            const otherSvg = otherBtn.querySelector('svg')
                            if (otherSvg) {
                                otherSvg.style.transform = 'rotate(0deg)'
                            }
                        }
                    }
                })

                // 切換當前項目
                if (target) {
                    const svg = btn.querySelector('svg')

                    if (isExpanded) {
                        // 收合
                        smoothCollapse(target)
                        expandedStates.set(targetId, false)
                        if (svg) svg.style.transform = 'rotate(0deg)'
                    } else {
                        // 展開
                        smoothExpand(target)
                        expandedStates.set(targetId, true)
                        if (svg) svg.style.transform = 'rotate(180deg)'
                    }
                }
            })
        })
    })
</script>

<style>
    /* 內容優化 */
    .faq-content-inner {
        will-change: opacity;
    }

    /* 游標閃爍動畫 */
    @keyframes blink {
        0%, 50% { opacity: 1; }
        51%, 100% { opacity: 0; }
    }

    /* 游標淡出動畫 */
    @keyframes fadeOut {
        from { opacity: 1; }
        to { opacity: 0; }
    }

    /* 手風琴容器優化 */
    #faq-accordion > div {
        will-change: auto;
    }
</style>
