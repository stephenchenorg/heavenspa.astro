---
import { createNestedT } from '@/utils/i18n'

const t = await createNestedT()

export interface FaqItem {
    id: string
    title: string
    content: string
}

interface Props {
    faqs: FaqItem[]
}

const { faqs } = Astro.props
---
{faqs && faqs.length > 0 ? (
<div id="faq-accordion">
    {faqs.map(faq => (
    <div class="border-b" :key={faq.id} style="border-bottom-color: var(--color-primary-500);">
        <button
          type="button"
          class="flex items-center justify-between w-full py-5 font-medium transition-all duration-300 hover:bg-gradient-to-r hover:from-transparent hover:via-primary-500/[0.03] hover:to-transparent gap-3 faq-toggle group"
          data-target={`faq-body-${faq.id}`}
        >
            <span class="text-lg font-bold text-left break-keep" style="color: var(--theme-text);">
              {faq.title}
            </span>
            <svg
              class="w-4 h-4 transition-transform duration-500 ease-out group-hover:scale-110 shrink-0"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 10 6"
              style="color: var(--color-primary-600);"
            >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 5 5 1 1 5"
                />
            </svg>
        </button>
        <div id={`faq-body-${faq.id}`} class="overflow-hidden max-h-0 transition-[max-height] duration-500 ease-out">
            <div class="px-6 pb-6 pt-2">
                <div class="faq-content-inner opacity-0 translate-y-2 transition-all duration-300 delay-100 leading-relaxed" set:html={faq.content}></div>
            </div>
        </div>
    </div>
    ))}
</div>
 ) : (
<div class="text-center py-16">
    <div class="max-w-md mx-auto">
        <div class="mb-6">
            <svg class="mx-auto h-16 w-16 opacity-30" style="color: var(--theme-text-secondary);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9 5.25h.008v.008H12v-.008z" />
            </svg>
        </div>
        <h3 class="text-xl font-medium mb-2" style="color: var(--theme-text);">
            {t('faq.empty.title')}
        </h3>
        <p class="text-sm leading-relaxed" style="color: var(--theme-text-secondary);">
            {t('faq.empty.description')}
        </p>
    </div>
</div>
    )}

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const toggles = document.querySelectorAll('.faq-toggle')

        // 平滑展開函數
        function smoothExpand(element: HTMLElement) {
            const content = element.querySelector('.faq-content-inner') as HTMLElement

            // 獲取自然高度
            element.style.maxHeight = 'none'
            const height = element.scrollHeight
            element.style.maxHeight = '0px'

            // 強制重新渲染
            void element.offsetHeight

            // 動畫展開
            requestAnimationFrame(() => {
                element.style.maxHeight = `${height}px`

                // 內容滑入動畫
                setTimeout(() => {
                    if (content) {
                        content.style.opacity = '1'
                        content.style.transform = 'translateY(0)'
                    }
                }, 150)

                // 動畫完成後設置為 auto 以支持動態內容
                setTimeout(() => {
                    element.style.maxHeight = 'none'
                }, 500)
            })
        }

        // 平滑收合函數
        function smoothCollapse(element: HTMLElement) {
            const content = element.querySelector('.faq-content-inner') as HTMLElement

            // 內容滑出動畫
            if (content) {
                content.style.opacity = '0'
                content.style.transform = 'translateY(-8px)'
            }

            // 設置當前高度
            const height = element.scrollHeight
            element.style.maxHeight = `${height}px`

            // 強制重新渲染
            void element.offsetHeight

            // 動畫收合
            setTimeout(() => {
                element.style.maxHeight = '0px'
            }, 100)
        }

        toggles.forEach(btn => {
            btn.addEventListener('click', () => {
                const targetId = btn.getAttribute('data-target')
                if (!targetId) return
                const target = document.getElementById(targetId)
                const isExpanded = target && target.style.maxHeight !== '0px' && target.style.maxHeight !== ''

                // 關閉其他項目
                document.querySelectorAll('#faq-accordion div[id^=\'faq-body-\']').forEach(el => {
                    const element = el as HTMLElement
                    if (element.id !== targetId && element.style.maxHeight !== '0px') {
                        smoothCollapse(element)
                        const otherBtn = el.previousElementSibling
                        if (otherBtn && otherBtn.querySelector) {
                            const otherSvg = otherBtn.querySelector('svg')
                            if (otherSvg) {
                                otherSvg.style.transform = 'rotate(0deg)'
                            }
                        }
                    }
                })

                // 切換當前項目
                if (target) {
                    const svg = btn.querySelector('svg')

                    if (isExpanded) {
                        // 收合
                        smoothCollapse(target)
                        if (svg) svg.style.transform = 'rotate(0deg)'
                    } else {
                        // 展開
                        smoothExpand(target)
                        if (svg) svg.style.transform = 'rotate(180deg)'
                    }
                }
            })
        })
    })
</script>

<style>
    /* 只保留 will-change 優化 */
    .faq-content-inner {
        will-change: opacity, transform;
    }
</style>
