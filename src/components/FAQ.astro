---
// FAQ 內容區組件
export interface FaqItem {
  id: string
  question: string
  answer: string
}

export interface FaqCategories {
  [key: string]: FaqItem[]
}

interface Props {
  faqData: FaqCategories
}

const { faqData } = Astro.props
---

<!-- FAQ 內容區 -->
<div class="w-full">
  {Object.entries(faqData).map(([category, faqs]) => (
    <div class="faq-category mb-12" data-category={category}>
      <!-- FAQ 手風琴 -->
      <div class="space-y-4">
        {faqs.map(faq => (
          <div class="faq-item overflow-hidden transition-all duration-300">
            <!-- 整個 FAQ 項目作為 button -->
            <button
              class="faq-button w-full text-left transition-all duration-200 border-b"
              style="border-bottom-color: var(--color-primary-500);"
              data-faq-id={faq.id}
              aria-expanded="false"
            >
              <!-- 問題標題 -->
              <div class="faq-question px-6 py-4 flex items-center justify-between">
                <span class="text-2xl font-semibold" style="color: var(--theme-text);">
                  {faq.question}
                </span>

                <!-- 展開/收合圖示 -->
                <svg
                  class="faq-icon w-5 h-5 transform transition-transform duration-200 flex-shrink-0"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  style="color: var(--color-primary-600);"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </div>

              <!-- 答案內容 -->
              <div class="faq-answer overflow-hidden transition-all duration-300 max-h-0" data-faq-content={faq.id}>
                <div class="px-6 pb-4 pt-2 border-b border-transparent" style="border-bottom-color: transparent;">
                  <div class="prose prose-sm max-w-none" style="color: var(--theme-text-secondary);">
                    <p class="mb-3 leading-relaxed typewriter-text" data-full-text={faq.answer}>
                      <span class="typewriter-content"></span>
                    </p>
                  </div>
                </div>
              </div>
            </button>
          </div>
        ))}
      </div>
    </div>
  ))}
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const faqButtons = document.querySelectorAll<HTMLButtonElement>('.faq-button')

  // Block fade-in animation function
  function startBlockFadeIn(textElement: HTMLElement, fullText: string, onComplete?: () => void) {
    const contentSpan = textElement.querySelector('.typewriter-content') as HTMLElement

    if (!contentSpan) return

    // Set the full text immediately
    contentSpan.textContent = fullText

    // Add fade-in animation class
    contentSpan.classList.add('block-fade-in')

    // Call completion callback after animation
    setTimeout(() => {
      if (onComplete) onComplete()
    }, 400) // Reduced to match faster animation
  }

  function resetBlockFadeIn(textElement: HTMLElement) {
    const contentSpan = textElement.querySelector('.typewriter-content') as HTMLElement

    if (contentSpan) {
      contentSpan.textContent = ''
      contentSpan.classList.remove('block-fade-in')
    }
  }

  // Helper function to adjust container height dynamically
  function adjustAnswerHeight(answerElement: HTMLElement) {
    if (!answerElement) return

    // Set to auto to allow full content display
    answerElement.style.maxHeight = 'none'

    // Force a reflow to get accurate measurements
    void answerElement.scrollHeight
    answerElement.style.maxHeight = '0px'

    // Trigger reflow and set to auto for full content display
    requestAnimationFrame(() => {
      answerElement.style.maxHeight = 'none' // Allow full height expansion
    })
  }

  // FAQ accordion functionality
  faqButtons.forEach(button => {
    button.addEventListener('click', function (this: HTMLButtonElement) {
      const faqAnswer = this.querySelector<HTMLElement>('.faq-answer')
      const answerContent = this.querySelector<HTMLElement>('.faq-answer > div')
      const faqIcon = this.querySelector<HTMLElement>('.faq-icon')
      const isExpanded = this.getAttribute('aria-expanded') === 'true'

      // Stop any active animation when switching sections

      // Get current category's buttons only
      const currentCategory = this.closest<HTMLElement>('.faq-category')
      const currentCategoryButtons = currentCategory?.querySelectorAll<HTMLButtonElement>('.faq-button')

      // Close all other FAQ items in current category and reset their typewriters
      currentCategoryButtons?.forEach((otherButton: HTMLButtonElement) => {
        if (otherButton !== this) {
          const otherAnswer = otherButton.querySelector<HTMLElement>('.faq-answer')
          const otherAnswerContent = otherButton.querySelector<HTMLElement>('.faq-answer > div')
          const otherIcon = otherButton.querySelector<HTMLElement>('.faq-icon')
          const otherTypewriter = otherButton.querySelector<HTMLElement>('.typewriter-text')

          otherButton.setAttribute('aria-expanded', 'false')
          // Show button border when collapsed, hide answer content border
          otherButton.style.borderBottomColor = 'var(--color-primary-500)'
          if (otherAnswer) {
            otherAnswer.classList.remove('expanded') // Remove expanded class
            otherAnswer.style.maxHeight = '0px'
          }
          if (otherAnswerContent) {
            otherAnswerContent.style.borderBottomColor = 'transparent'
          }
          if (otherIcon) {
            otherIcon.style.transform = 'rotate(0deg)'
          }
          if (otherTypewriter) {
            resetBlockFadeIn(otherTypewriter)
          }
        }
      })

      // Toggle current FAQ item
      if (isExpanded) {
        // Collapse
        this.setAttribute('aria-expanded', 'false')
        // Show button border when collapsed, hide answer content border
        this.style.borderBottomColor = 'var(--color-primary-500)'
        if (faqAnswer) {
          faqAnswer.classList.remove('expanded') // Remove expanded class
          faqAnswer.style.maxHeight = '0px'
        }
        if (answerContent) {
          answerContent.style.borderBottomColor = 'transparent'
        }
        if (faqIcon) {
          faqIcon.style.transform = 'rotate(0deg)'
        }
        const typewriter = this.querySelector<HTMLElement>('.typewriter-text')
        if (typewriter) {
          resetBlockFadeIn(typewriter)
        }
      } else {
        // Expand
        this.setAttribute('aria-expanded', 'true')
        // Hide button border when expanded, show answer content border
        this.style.borderBottomColor = 'transparent'
        if (faqAnswer && answerContent) {
          // Show answer content border first
          answerContent.style.borderBottomColor = 'var(--color-primary-500)'

          // Add expanded class for full height display
          faqAnswer.classList.add('expanded')

          // Use the helper function to adjust height properly
          adjustAnswerHeight(faqAnswer)

          // Then start block fade-in animation
          const typewriter = this.querySelector<HTMLElement>('.typewriter-text')
          if (typewriter) {
            const fullText = typewriter.getAttribute('data-full-text') || ''
            setTimeout(() => {
              startBlockFadeIn(typewriter, fullText, () => {
                // Ensure expanded class is maintained after animation completes
                faqAnswer.classList.add('expanded')
              })
            }, 100) // Reduced delay for faster content appearance
          }
        }
        if (faqIcon) {
          faqIcon.style.transform = 'rotate(180deg)'
        }
      }
    })
  })
})
</script>

<style>

  .faq-button {
    transition: border-bottom-color 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .faq-answer {
    transition: max-height 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    overflow: hidden;
  }

  .faq-answer.expanded {
    max-height: none !important;
    overflow: visible;
  }

  .faq-answer > div {
    transition: border-bottom-color 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    padding-bottom: 1rem; /* Ensure space for border */
  }

  /* Block fade-in animation styles */
  .typewriter-content {
    opacity: 0;
    transform: translateY(10px);
    transition: opacity 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94), transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .block-fade-in {
    opacity: 1 !important;
    transform: translateY(0) !important;
  }

  .typewriter-text {
    min-height: 1.5em; /* Prevent layout shift during animation */
    line-height: 1.6; /* Better spacing for longer content */
  }
</style>
