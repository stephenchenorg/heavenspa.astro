---
import { createNestedT } from '@/utils/i18n'

const t = await createNestedT()

export interface FaqItem {
    id: string
    title: string
    content: string
}

interface Props {
    faqs: FaqItem[]
}

const { faqs } = Astro.props
---
{faqs && faqs.length > 0 ? (
<div id="faq-accordion">
    {faqs.map(faq => (
    <div class="border-b border-primary-500" :key={faq.id}>
        <button
          type="button"
          class="flex items-center justify-between w-full py-5 font-medium transition-all duration-300 hover:bg-gradient-to-r hover:from-transparent hover:via-primary-500/[0.03] hover:to-transparent gap-3 faq-toggle group"
          data-target={`faq-body-${faq.id}`}
        >
            <span class="text-lg font-bold text-left break-keep text-black dark:text-white">
              {faq.title}
            </span>
            <svg
              class="w-4 h-4 text-primary-600 transition-transform duration-500 ease-out group-hover:scale-110 shrink-0"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 10 6"
            >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 5 5 1 1 5"
                />
            </svg>
        </button>
        <div id={`faq-body-${faq.id}`} class="faq-content overflow-hidden transition-all duration-300 ease-in-out max-h-0">
            <div class="px-6 pb-6 pt-2">
                <div class="faq-text leading-relaxed text-gray-700 dark:text-gray-300" data-content={faq.content}></div>
            </div>
        </div>
    </div>
    ))}
</div>
 ) : (
<div class="text-center py-16">
    <div class="max-w-md mx-auto">
        <div class="mb-6">
            <svg class="mx-auto h-16 w-16 opacity-30 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9 5.25h.008v.008H12v-.008z" />
            </svg>
        </div>
        <h3 class="text-xl font-medium mb-2 text-black dark:text-white">
            {t('faq.empty.title')}
        </h3>
        <p class="text-sm leading-relaxed text-gray-600 dark:text-gray-400">
            {t('faq.empty.description')}
        </p>
    </div>
</div>
    )}

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const toggles = document.querySelectorAll('.faq-toggle')
        const contents = document.querySelectorAll('.faq-content')

        // 預先計算所有內容的高度，避免運行時計算
        const contentHeights = new Map()

        // 優化的打字機效果函數
        function typewriterEffect(element: HTMLElement, text: string, speed: number = 25) {
            element.textContent = ''
            let i = 0

            function type() {
                if (i < text.length) {
                    const char = text.charAt(i)
                    element.textContent += char
                    i++

                    // 使用 requestAnimationFrame 讓動畫更流暢
                    const nextSpeed = (char === '。' || char === '，' || char === '！' || char === '？') ? speed * 1.5 : speed
                    setTimeout(() => requestAnimationFrame(type), nextSpeed)
                }
            }

            requestAnimationFrame(type)
        }

        // 將 HTML 轉為純文字
        function stripHtml(html: string): string {
            const tmp = document.createElement('div')
            tmp.innerHTML = html
            return tmp.textContent || ''
        }

        // 預先計算所有內容高度
        contents.forEach(content => {
            const contentEl = content as HTMLElement
            const textElement = contentEl.querySelector('.faq-text') as HTMLElement

            if (textElement) {
                const htmlContent = textElement.getAttribute('data-content') || ''
                const plainText = stripHtml(htmlContent)

                // 使用 cloneNode 在隱藏狀態下計算高度
                const clone = contentEl.cloneNode(true) as HTMLElement
                const cloneText = clone.querySelector('.faq-text') as HTMLElement

                clone.style.cssText = 'position: absolute; visibility: hidden; max-height: none; height: auto;'
                cloneText.textContent = plainText

                document.body.appendChild(clone)
                const height = clone.scrollHeight
                contentHeights.set(contentEl.id, height)
                document.body.removeChild(clone)
            }
        })

        toggles.forEach((btn) => {
            btn.addEventListener('click', () => {
                const targetId = btn.getAttribute('data-target')
                if (!targetId) return

                const target = document.getElementById(targetId)
                if (!target) return

                const svg = btn.querySelector('svg')
                const textElement = target.querySelector('.faq-text') as HTMLElement
                const isCurrentlyOpen = target.style.maxHeight && target.style.maxHeight !== '0px'

                // 關閉所有其他項目
                contents.forEach((content) => {
                    const contentEl = content as HTMLElement
                    if (contentEl.id !== targetId) {
                        contentEl.style.maxHeight = '0px'
                        const otherBtn = document.querySelector(`[data-target="${contentEl.id}"]`)
                        const otherSvg = otherBtn?.querySelector('svg')
                        const otherTextElement = contentEl.querySelector('.faq-text') as HTMLElement

                        if (otherSvg) {
                            otherSvg.style.transform = 'rotate(0deg)'
                        }
                        if (otherTextElement) {
                            otherTextElement.textContent = ''
                        }
                    }
                })

                // 切換當前項目
                if (isCurrentlyOpen) {
                    // 關閉
                    target.style.maxHeight = '0px'
                    if (svg) {
                        svg.style.transform = 'rotate(0deg)'
                    }
                    if (textElement) {
                        textElement.textContent = ''
                    }
                } else {
                    // 打開 - 使用預先計算的高度
                    const targetHeight = contentHeights.get(targetId)
                    if (targetHeight) {
                        target.style.maxHeight = targetHeight + 'px'
                    }

                    if (svg) {
                        svg.style.transform = 'rotate(180deg)'
                    }

                    // 等待展開動畫完成後開始打字機效果
                    setTimeout(() => {
                        if (textElement) {
                            const htmlContent = textElement.getAttribute('data-content') || ''
                            const plainText = stripHtml(htmlContent)
                            typewriterEffect(textElement, plainText, 20)
                        }
                    }, 300)
                }
            })
        })
    })
</script>

<style>
    /* 優化手風琴性能 */
    .faq-content {
        will-change: max-height;
    }

    /* SVG 轉換動畫 */
    .faq-toggle svg {
        transition: transform 0.3s ease-in-out;
    }

    /* 手風琴容器優化 */
    #faq-accordion > div {
        will-change: auto;
    }
</style>
