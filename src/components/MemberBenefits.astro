---
import {gql, graphQLAPI} from '@/api'
import Button from "./ui/Button.astro"
import {createAstroT} from '@/utils/astro-i18n'
import ArrowRight from '@/components/icon/ArrowRight.astro'
import ArrowLeft from '@/components/icon/ArrowLeft.astro'

// 翻譯函數
const t = createAstroT(Astro)

// 定義 API 回應的類型
export interface ArticleCover {
  desktop: string;
  desktop_blur: string;
  mobile: string;
  mobile_blur: string;
}

export interface Article {
  id: string;
  title: string;
  created_at: string;
  cover: ArticleCover;
}

export interface ArticlesResponse {
  articles: {
    data: Article[];
  };
}

export interface Benefit {
  id: string;
  title: string;
  subtitle: string;
  description: string;
  date: string;
  year: string;
  month: string;
  image: string;
  buttonText: string;
  category: string;
  cover?: ArticleCover; // 添加 cover 物件支援
}

export interface Props {
  benefits?: Benefit[];
}

// 不再使用預設假資料

// GraphQL 查詢與錯誤處理
let apiBenefits: Benefit[] = [];

try {
  const articlesData: ArticlesResponse = await graphQLAPI(gql`
    query MyQuery {
      articles(sort_by: "asc", sort_column: "sort", is_newest: true) {
        data {
          cover {
            desktop
            desktop_blur
            mobile
            mobile_blur
          }
          id
          title
          created_at
        }
      }
    }
  `);

  // 將 API 資料轉換為 Benefit 格式
  apiBenefits = (articlesData.articles.data || []).map((article: Article) => {
    const createdDate = new Date(article.created_at);
    return {
      id: article.id,
      title: article.title,
      subtitle: '會員專屬禮遇',
      description: `最新優惠活動 - ${article.title}`,
      date: createdDate.getDate().toString().padStart(2, '0'),
      year: createdDate.getFullYear().toString(),
      month: (createdDate.getMonth() + 1).toString().padStart(2, '0'),
      image: article.cover.desktop,
      buttonText: '立即查看',
      category: 'VIEW MORE',
      cover: article.cover, // 保留完整的 cover 物件
    } as Benefit;
  });
} catch (error) {
  console.error('Failed to fetch articles data:', error);
}

// 只使用 API 資料或 props 傳入的資料
const {benefits = apiBenefits} = Astro.props;
---

<section
  class="w-full min-h-screen flex flex-col justify-center items-center relative overflow-x-hidden bg-white py-16 px-8 lg:px-16 md:px-12 sm:px-8">
  <div class="max-w-6xl mx-auto w-full relative px-8 lg:px-8 md:px-6 sm:px-4">
    <!-- 標題區 -->
    <div class="text-center mb-16">
      <h2
        class="text-[3.5rem] lg:text-[3rem] md:text-[2.5rem] sm:text-[2rem] font-light text-black tracking-[6px] lg:tracking-[4px] md:tracking-[3px] sm:tracking-[2px] mb-4">{t('benefits.subtitle')}</h2>
      <h3
        class="text-2xl md:text-xl sm:text-base text-neutral-600 font-normal tracking-[2px] uppercase">{t('benefits.title')}</h3>
    </div>

    <!-- 專屬優惠按鈕 -->
    <div class="my-5 md:text-center md:mb-8">
      <Button href="#courses" variant="primary">{t('benefits.exclusive')}</Button>
    </div>

    {benefits && benefits.length > 0 ? (
      <!-- 優惠卡片輪播 -->
      <div class="relative">
        <div class="overflow-hidden cursor-grab select-none active:cursor-grabbing" id="carouselContainer">
          <div
            class="flex transition-transform duration-[0.8s] ease-[cubic-bezier(0.4,0,0.2,1)] gap-8 md:gap-6 md:justify-center"
            id="benefitsTrack">
            {benefits.map((benefit, index) => (
              <div
                class="flex-[0_0_calc(33.333%-1.333rem)] lg:flex-[0_0_calc(50%-1rem)] md:flex-[0_0_100%] md:max-w-[350px] sm:max-w-[300px] overflow-visible relative flex flex-col min-h-[450px] lg:min-h-[420px] md:min-h-[400px] sm:min-h-[380px] h-auto animate-slide-in mx-auto"
                data-index={index}
                style={index === 1 ? "animation-delay: 0.2s" : index === 2 ? "animation-delay: 0.4s" : ""}>
                <div
                  class="relative mx-6 my-4 lg:mx-5 lg:my-3 md:mx-4 md:my-3 sm:mx-3 sm:my-2 overflow-hidden w-[calc(100%-3rem)] lg:w-[calc(100%-2.4rem)] md:w-[calc(100%-2rem)] sm:w-[calc(100%-1.6rem)] h-[300px] lg:h-[280px] md:h-[260px] sm:h-[240px] flex-shrink-0">
                  {benefit.cover ? (
                    <picture>
                      <source media="(max-width: 768px)" srcset={benefit.cover.mobile}/>
                      <img
                        src={benefit.cover.desktop}
                        alt={benefit.title}
                        loading="lazy"
                        onload="this.style.filter='none'"
                        style="filter: blur(5px); transition: filter 0.3s ease;"
                        class="w-full h-full object-cover transition-transform duration-300 hover:translate-y-[10px]"
                      />
                    </picture>
                  ) : (
                    <img src={benefit.image} alt={benefit.title}
                         class="w-full h-full object-cover transition-transform duration-300 hover:translate-y-[10px]"/>
                  )}
                  <div class="absolute inset-0 opacity-70 mix-blend-multiply"></div>
                  <div
                    class="flex flex-col absolute justify-center items-center right-0 top-0 bg-primary-500 w-20 h-20 md:w-[70px] md:h-[70px] sm:w-[60px] sm:h-[60px] p-[10px]">
                    <span class="text-lg md:text-base sm:text-sm text-white font-medium">{benefit.year}</span>
                    <span class="text-[35px] md:text-[28px] sm:text-2xl text-white font-bold">{benefit.month}</span>
                  </div>
                </div>
                <div
                  class="flex justify-between relative -top-[100px] bg-primary-500 border-2 border-primary-600 text-white py-3 px-6 rounded-[25px] text-sm font-medium cursor-pointer transition-all duration-300 w-[calc(100%-40px)] mx-auto flex-shrink-0 mt-auto">
                  <button>{benefit.buttonText}</button>
                  <div
                    class="flex border-b border-primary-600 transition-all duration-300 ease-in-out hover:border-none">
                    <span class="transition-all duration-300 ease-in-out hover:-translate-x-[10px]">VIEW MORE</span>
                    <ArrowRight size="28"
                                class="ml-4 transition-all duration-300 ease-in-out hover:translate-x-[10px]"/>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- 導航按鈕 -->
        <div
          class="flex justify-center items-center gap-4 md:gap-5 sm:gap-3 mt-12 md:mt-8 sm:mt-6 flex-wrap sm:justify-between sm:items-center sm:max-w-[280px] sm:mx-auto">
          <button
            class="w-10 h-10 sm:w-[35px] sm:h-[35px] border-2 border-primary-600 bg-primary-500 rounded-full cursor-pointer transition-all duration-300 p-0 flex items-center justify-center text-white flex-shrink-0 disabled:opacity-30 disabled:cursor-not-allowed hover:bg-primary-600 hover:text-white hover:scale-110 hover:disabled:bg-primary-500 hover:disabled:text-white hover:disabled:scale-100 sm:order-first"
            id="prevBtn">
            <ArrowLeft size="20"/>
          </button>
          <div class="flex gap-2 items-center sm:flex-1 sm:justify-center sm:mx-4" id="carouselDots">
            <!-- 動態生成的圓點 -->
          </div>
          <button
            class="w-10 h-10 sm:w-[35px] sm:h-[35px] border-2 border-primary-600 bg-primary-500 rounded-full cursor-pointer transition-all duration-300 p-0 flex items-center justify-center text-white flex-shrink-0 disabled:opacity-30 disabled:cursor-not-allowed hover:bg-primary-600 hover:text-white hover:scale-110 hover:disabled:bg-primary-500 hover:disabled:text-white hover:disabled:scale-100 sm:order-last"
            id="nextBtn">
            <ArrowRight size="20"/>
          </button>
        </div>
      </div>
    ) : (
      <!-- 無資料顯示 -->
      <div class="flex justify-center items-center min-h-[400px] my-8">
        <div class="text-center max-w-md p-8">
          <div class="mb-6 flex justify-center">
            <svg width="80" height="80" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M12 2L13.09 8.26L22 9L13.09 9.74L12 16L10.91 9.74L2 9L10.91 8.26L12 2Z" fill="#D7AE54"
                    opacity="0.3"/>
              <path d="M12 6L12.5 10L17 10.5L12.5 11L12 15L11.5 11L7 10.5L11.5 10L12 6Z" fill="#D7AE54"/>
            </svg>
          </div>
          <h3 class="text-[1.8rem] font-semibold text-black mb-4 tracking-wide">會員禮遇即將推出</h3>
          <p class="text-lg text-neutral-600 leading-relaxed tracking-[0.5px]">
            我們正在為您準備精彩的會員專屬優惠，敬請期待！</p>
        </div>
      </div>
    )}
  </div>


  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const track = document.getElementById('benefitsTrack') as HTMLElement
      const container = document.getElementById('carouselContainer') as HTMLElement
      const prevBtn = document.getElementById('prevBtn') as HTMLElement
      const nextBtn = document.getElementById('nextBtn') as HTMLElement
      const dotsContainer = document.getElementById('carouselDots') as HTMLElement
      const cards = document.querySelectorAll('.card-content')

      let currentIndex = 0
      let isDragging = false
      let startX = 0
      let currentTranslate = 0
      let initialTranslate = 0

      const totalCards = cards.length
      const getCardsPerView = () => {
        if (window.innerWidth <= 480) return 1
        if (window.innerWidth <= 768) return 1
        if (window.innerWidth <= 1024) return 2
        return 3
      }
      let cardsPerView = getCardsPerView()
      const getMaxIndex = () => Math.max(0, totalCards - cardsPerView)

      // 創建圓點
      function createDots() {
        dotsContainer.innerHTML = ''
        const maxIndex = getMaxIndex()
        for (let i = 0; i <= maxIndex; i++) {
          const dot = document.createElement('button')
          dot.className = `w-3 h-3 rounded-full border-none cursor-pointer transition-all duration-300 ${
            i === currentIndex
              ? 'bg-primary-500 transform scale-110'
              : 'bg-primary-500/30 hover:bg-primary-500/60'
          }`
          dot.addEventListener('click', () => goToSlide(i))
          dotsContainer.appendChild(dot)
        }
      }

      // 更新輪播位置
      function updateCarousel() {
        if (cardsPerView === 1) {
          // 手機版：每次移動一整個卡片的寬度
          const cardWidth = cards[0] ? (cards[0] as HTMLElement).offsetWidth + 24 : 350 // 24px = gap
          const translateX = -(currentIndex * cardWidth)
          track.style.transform = `translateX(${translateX}px)`
        } else {
          // 桌面版：使用百分比
          const translateX = -(currentIndex * (100 / cardsPerView))
          track.style.transform = `translateX(${translateX}%)`
        }
        updateDots()
        updateButtons()
      }

      // 更新圓點狀態
      function updateDots() {
        const dots = dotsContainer.querySelectorAll('button')
        dots.forEach((dot, index) => {
          if (index === currentIndex) {
            dot.className = 'w-3 h-3 rounded-full border-none cursor-pointer transition-all duration-300 bg-primary-500 transform scale-110'
          } else {
            dot.className = 'w-3 h-3 rounded-full border-none cursor-pointer transition-all duration-300 bg-primary-500/30 hover:bg-primary-500/60'
          }
        })
      }

      // 更新按鈕狀態
      function updateButtons() {
        const maxIndex = getMaxIndex();
        (prevBtn as HTMLButtonElement).disabled = currentIndex === 0;
        (nextBtn as HTMLButtonElement).disabled = currentIndex >= maxIndex
      }

      // 跳到指定幻燈片
      function goToSlide(index: number) {
        currentIndex = Math.max(0, Math.min(index, getMaxIndex()))
        updateCarousel()
      }

      // 下一張
      function nextSlide() {
        if (currentIndex < getMaxIndex()) {
          currentIndex++
          updateCarousel()
        }
      }

      // 上一張
      function prevSlide() {
        if (currentIndex > 0) {
          currentIndex--
          updateCarousel()
        }
      }

      // 拖拽功能
      function handleDragStart(e: MouseEvent | TouchEvent) {
        isDragging = true
        startX = e instanceof MouseEvent ? e.clientX : e.touches[0].clientX
        initialTranslate = currentTranslate
        track.style.transition = 'none'
      }

      function handleDragMove(e: MouseEvent | TouchEvent) {
        if (!isDragging) return
        e.preventDefault()
        const currentX = e instanceof MouseEvent ? e.clientX : e.touches[0].clientX
        const diff = currentX - startX
        currentTranslate = initialTranslate + diff

        // 即時更新位置以提供視覺反饋
        const currentTransform = track.style.transform
        const currentTranslateX = currentTransform.includes('translateX')
          ? Number.parseFloat(currentTransform.match(/translateX\(([^)]+)\)/)?.[1] || '0') : 0

        track.style.transform = cardsPerView === 1
          ? `translateX(${currentTranslateX + diff}px)`
          : `translateX(${currentTranslateX + diff}%)`
      }

      function handleDragEnd() {
        if (!isDragging) return
        isDragging = false
        track.style.transition = 'transform 0.8s cubic-bezier(0.4, 0, 0.2, 1)'

        const threshold = cardsPerView === 1 ? 80 : 100
        if (Math.abs(currentTranslate) > threshold) {
          if (currentTranslate > 0) {
            prevSlide()
          } else {
            nextSlide()
          }
        } else {
          // 回到原位置
          updateCarousel()
        }

        currentTranslate = 0
      }

      // 鍵盤控制
      function handleKeydown(e: KeyboardEvent) {
        if (e.key === 'ArrowLeft') {
          prevSlide()
        } else if (e.key === 'ArrowRight') {
          nextSlide()
        }
      }

      // 響應式更新
      function handleResize() {
        const newCardsPerView = getCardsPerView()
        if (newCardsPerView !== cardsPerView) {
          cardsPerView = newCardsPerView
          currentIndex = Math.min(currentIndex, getMaxIndex())

          // 重設transform以避免佈局錯亂
          track.style.transform = 'translateX(0)'

          // 延遲更新以確保DOM已更新
          setTimeout(() => {
            createDots()
            updateCarousel()
          }, 100)
        }
      }

      // 事件監聽器
      prevBtn?.addEventListener('click', prevSlide)
      nextBtn?.addEventListener('click', nextSlide)

      // 拖拽事件
      container?.addEventListener('mousedown', handleDragStart)
      container?.addEventListener('mousemove', handleDragMove)
      container?.addEventListener('mouseup', handleDragEnd)
      container?.addEventListener('mouseleave', handleDragEnd)
      container?.addEventListener('touchstart', handleDragStart, {passive: false})
      container?.addEventListener('touchmove', handleDragMove, {passive: false})
      container?.addEventListener('touchend', handleDragEnd)

      // 鍵盤和響應式事件
      document.addEventListener('keydown', handleKeydown)
      window.addEventListener('resize', handleResize)

      // 初始化
      createDots()
      updateCarousel()
    })
  </script>
</section>
